Problem: ArrayListTest

---------------------
PUT_AddContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alContainsX && New_alCount == Old_alCount + 1 && New_x == Old_x && New_alLastIndexOfX == Old_alCount && New_Ret == Old_alCount && New_alCount != Old_alCount && Old_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_alLastIndexOfX != Old_alIndexOfX && New_Ret != Old_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX && New_Ret != Old_alLastIndexOfX && New_Ret == New_alLastIndexOfX)

simplified postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_Ret == Old_alCount && (!(Old_alIndexOfX == New_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_Ret == Old_alIndexOfX)) && (!(New_Ret == Old_alLastIndexOfX)) && New_Ret == New_alLastIndexOfX))

predicates: None

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_alContainsX && New_alCount == Old_alCount + 1 && New_x == Old_x && New_alLastIndexOfX == Old_alCount && New_Ret == Old_alCount && New_alCount != Old_alCount && Old_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_alLastIndexOfX != Old_alIndexOfX && New_Ret != Old_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX && New_Ret != Old_alLastIndexOfX && New_Ret == New_alLastIndexOfX) && (((New_alIndexOfX == Old_alIndexOfX && New_alIndexOfX != Old_alCount && New_alLastIndexOfX != New_alIndexOfX && New_Ret != New_alIndexOfX) && Old_alContainsX) || ((New_alIndexOfX == Old_alCount && New_alIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_Ret == New_alIndexOfX) && (!(Old_alContainsX)))))

simplified postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_Ret == Old_alCount && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_Ret == Old_alLastIndexOfX)) && New_Ret == New_alLastIndexOfX && New_alIndexOfX == Old_alIndexOfX && (!(New_Ret == New_alIndexOfX)) && Old_alContainsX) || (New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_Ret == Old_alCount && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_Ret == Old_alLastIndexOfX)) && New_Ret == New_alLastIndexOfX && Old_alLastIndexOfX == Old_alIndexOfX && New_Ret == New_alIndexOfX && (!(Old_alContainsX))))

predicates: Old_alContainsX

Any: Pass

L: Pass

SubL: Pass

=====
k == 2

learned postcondition: ((New_alContainsX && New_alCount == Old_alCount + 1 && New_x == Old_x && New_alLastIndexOfX == Old_alCount && New_Ret == Old_alCount && New_alCount != Old_alCount && Old_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_alLastIndexOfX != Old_alIndexOfX && New_Ret != Old_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX && New_Ret != Old_alLastIndexOfX && New_Ret == New_alLastIndexOfX) && ((((New_alIndexOfX == Old_alIndexOfX && New_alIndexOfX != Old_alCount && New_alLastIndexOfX != New_alIndexOfX && New_Ret != New_alIndexOfX) && (((New_alIndexOfX == Old_x &&  Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount &&  Old_alIndexOfX == Old_x &&  New_alLastIndexOfX != Old_x &&  New_Ret != Old_x &&  Old_alIndexOfX == New_x &&  New_alLastIndexOfX != New_x &&  New_Ret != New_x) && New_alIndexOfX == New_x) || ((Old_alIndexOfX != Old_x &&  New_alIndexOfX != Old_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX != New_x) && (!(New_alIndexOfX == New_x))))) && Old_alContainsX) || (((New_alIndexOfX == Old_alCount && New_alIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_Ret == New_alIndexOfX) && (((New_x == Old_alCount &&  Old_x == Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount &&  Old_alIndexOfX != Old_x &&  New_alIndexOfX == Old_x &&  Old_alLastIndexOfX != Old_x &&  New_alLastIndexOfX == Old_x &&  New_Ret == Old_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX == New_x &&  Old_alLastIndexOfX != New_x &&  New_alLastIndexOfX == New_x) && New_Ret == New_x) || ((Old_x != Old_alCount &&  New_x != Old_alCount &&  New_alIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  New_Ret != Old_x &&  New_alIndexOfX != New_x &&  New_alLastIndexOfX != New_x &&  New_Ret != New_x) && (!(New_Ret == New_x))))) && (!(Old_alContainsX)))))

simplified postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_Ret == Old_alCount && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_Ret == Old_alLastIndexOfX)) && New_Ret == New_alLastIndexOfX && New_alIndexOfX == Old_alIndexOfX && (!(New_Ret == New_alIndexOfX)) && Old_alContainsX) || (New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_Ret == Old_alCount && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_Ret == Old_alLastIndexOfX)) && New_Ret == New_alLastIndexOfX && Old_alLastIndexOfX == Old_alIndexOfX && New_Ret == New_alIndexOfX && (!(Old_alContainsX))))

predicates: Old_alContainsX

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_RemoveContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alCount == Old_alCount - Old_alIndexOfX - 1 && New_x == Old_x && New_alLastIndexOfX ==    Old_alLastIndexOfX - Old_alIndexOfX - 1 && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_alIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount)

simplified postcondition: ((New_alCount == -1 + Old_alCount + -1*Old_alIndexOfX && New_x == Old_x && New_alLastIndexOfX ==       -1 + Old_alLastIndexOfX + -1*Old_alIndexOfX && (!(Old_alIndexOfX == Old_alCount)) && (!(New_alIndexOfX == Old_alCount)) && (!(New_alLastIndexOfX == Old_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount))))

predicates: None

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_x == Old_x && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_alIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount) && (((New_alCount ==               Old_alIndexOfX +               Old_alCount - Old_alLastIndexOfX && New_alIndexOfX == Old_alIndexOfX && Old_alIndexOfX != New_alCount && New_alLastIndexOfX == New_alIndexOfX) && New_alLastIndexOfX == Old_alIndexOfX) || ((Old_alContainsX && New_alCount == Old_alCount - 1 && New_alCount != Old_alCount && New_alLastIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX) && (!(New_alLastIndexOfX == Old_alIndexOfX)))))

simplified postcondition: ((New_x == Old_x && (!(New_alLastIndexOfX == Old_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_alCount ==       Old_alIndexOfX + Old_alCount + -1*Old_alLastIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == Old_alIndexOfX) || (New_x == Old_x && (!(Old_alIndexOfX == Old_alCount)) && (!(New_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_alLastIndexOfX == Old_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && Old_alContainsX && New_alCount == -1 + Old_alCount && (!(Old_alLastIndexOfX == New_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX)) && (!(New_alLastIndexOfX == Old_alIndexOfX))))

predicates: New_alLastIndexOfX == Old_alIndexOfX

Any: Pass

L: Pass

SubL: Pass

=====
k == 2

learned postcondition: ((New_x == Old_x && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_alIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount) && ((((New_alCount ==                   Old_alIndexOfX +                   Old_alCount - Old_alLastIndexOfX && New_alIndexOfX == Old_alIndexOfX && Old_alIndexOfX != New_alCount && New_alLastIndexOfX == New_alIndexOfX) && (((New_alCount == Old_x &&  Old_x == New_alCount &&  Old_alIndexOfX != Old_x &&  New_alIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX != New_x &&  New_alLastIndexOfX != New_x) && New_x == New_alCount) || ((Old_x != New_alCount &&  New_x != New_alCount) && (!(New_x == New_alCount))))) && New_alLastIndexOfX == Old_alIndexOfX) || (((Old_alContainsX && New_alCount == Old_alCount - 1 && New_alCount != Old_alCount && New_alLastIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX) && (((Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_alIndexOfX == Old_x &&  New_alLastIndexOfX != Old_x &&  New_alLastIndexOfX != New_x) && Old_alIndexOfX == New_x) || ((Old_alIndexOfX != Old_x &&  Old_alIndexOfX != New_x) && (!(Old_alIndexOfX == New_x))))) && (!(New_alLastIndexOfX == Old_alIndexOfX)))))

simplified postcondition: ((New_x == Old_x && (!(New_alLastIndexOfX == Old_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_alCount ==       Old_alIndexOfX + Old_alCount + -1*Old_alLastIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == Old_alIndexOfX) || (New_x == Old_x && (!(Old_alIndexOfX == Old_alCount)) && (!(New_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_alLastIndexOfX == Old_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && Old_alContainsX && New_alCount == -1 + Old_alCount && (!(Old_alLastIndexOfX == New_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX)) && (!(New_alLastIndexOfX == Old_alIndexOfX))))

predicates: New_alLastIndexOfX == Old_alIndexOfX

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_InsertContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alContainsX && New_alCount == Old_alCount + 1 && New_x == Old_x && New_index == Old_index && New_alCount != Old_alCount && Old_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && Old_index != New_alCount && New_index != New_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_alLastIndexOfX != Old_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX)

simplified postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX))))

predicates: None

postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX))))

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_alContainsX && New_alCount == Old_alCount + 1 && New_x == Old_x && New_index == Old_index && New_alCount != Old_alCount && Old_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && Old_index != New_alCount && New_index != New_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_alLastIndexOfX != Old_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX) && (((New_alIndexOfX != Old_alCount && New_alLastIndexOfX != New_alIndexOfX) && Old_alContainsX) || ((New_alIndexOfX == Old_index && New_alLastIndexOfX == Old_index && Old_alIndexOfX != Old_index && Old_alLastIndexOfX != Old_index && Old_alIndexOfX != New_index && New_alIndexOfX == New_index && Old_alLastIndexOfX != New_index && New_alLastIndexOfX == New_index && New_alIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX) && (!(Old_alContainsX)))))

simplified postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX)) && (!(New_alIndexOfX == Old_alCount)) && (!(New_alLastIndexOfX == New_alIndexOfX)) && Old_alContainsX) || (New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alLastIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX)) && New_alLastIndexOfX == New_index && Old_alLastIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && (!(Old_alContainsX))))

predicates: Old_alContainsX

Any: reject

L: reject

SubL: Pass

=====
k == 2

learned postcondition: ((New_alContainsX && New_alCount == Old_alCount + 1 && New_x == Old_x && New_index == Old_index && New_alCount != Old_alCount && Old_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && Old_index != New_alCount && New_index != New_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_alLastIndexOfX != Old_alIndexOfX && New_alLastIndexOfX != Old_alLastIndexOfX) && ((((New_alIndexOfX == Old_index) && (((New_index == Old_x &&  New_alIndexOfX == Old_x &&  New_alLastIndexOfX ==                          Old_alLastIndexOfX + Old_x + 1 &&  Old_x != New_alCount &&  New_x != New_alCount &&  Old_index == Old_x &&  Old_index == New_x &&  New_index == New_x) && New_alIndexOfX == New_x) || ((Old_index != Old_x &&  New_index != Old_x &&  New_alIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  Old_index != New_x &&  New_index != New_x &&  New_alIndexOfX != New_x &&  New_alLastIndexOfX != New_x) && (!(New_alIndexOfX == New_x))))) && New_alIndexOfX == New_index) || (((Old_alContainsX && New_alIndexOfX == Old_alIndexOfX && New_alIndexOfX != Old_alCount && Old_alIndexOfX != Old_index && New_alIndexOfX != Old_index && Old_alIndexOfX != New_index && New_alIndexOfX != New_index && New_alLastIndexOfX != New_alIndexOfX) && (((New_alLastIndexOfX == Old_index &&  Old_alLastIndexOfX != Old_index &&  Old_alLastIndexOfX != New_index &&  New_alLastIndexOfX == New_index &&  Old_alLastIndexOfX ==                          Old_alIndexOfX) && Old_alLastIndexOfX == New_alIndexOfX) || ((New_alLastIndexOfX ==                          Old_alLastIndexOfX + 1 &&  Old_alLastIndexOfX !=                          Old_alIndexOfX &&  Old_alLastIndexOfX !=                          New_alIndexOfX) && (!(Old_alLastIndexOfX ==                          New_alIndexOfX))))) && (!(New_alIndexOfX == New_index)))))

simplified postcondition: ((New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX)) && New_alLastIndexOfX == 1 + Old_alLastIndexOfX + Old_x && New_alIndexOfX == New_index && New_alIndexOfX == New_x) || (New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == Old_alCount)) && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alIndexOfX)) && (!(New_alLastIndexOfX == Old_alLastIndexOfX)) && (!(New_alLastIndexOfX == New_x)) && New_alIndexOfX == New_index && (!(New_alIndexOfX == New_x))) || (New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alLastIndexOfX == Old_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && Old_alContainsX && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == New_index && (!(New_alIndexOfX == New_index)) && Old_alLastIndexOfX == New_alIndexOfX) || (New_alContainsX && New_alCount == 1 + Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == Old_alCount)) && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == Old_alIndexOfX)) && Old_alContainsX && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == 1 + Old_alLastIndexOfX && (!(New_alIndexOfX == New_index)) && (!(Old_alLastIndexOfX == New_alIndexOfX))))

predicates: New_alIndexOfX == New_index

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_SetContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && Old_index != Old_alCount && New_index != Old_alCount && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && Old_index != New_alCount && New_index != New_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount)

simplified postcondition: ((New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(New_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount))))

predicates: None

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && Old_index != Old_alCount && New_index != Old_alCount && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && Old_index != New_alCount && New_index != New_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount) && (((Old_alContainsX && New_alIndexOfX == 0 && New_alLastIndexOfX == Old_alLastIndexOfX) && New_alIndexOfX == Old_alIndexOfX) || ((New_alIndexOfX == Old_index && Old_alIndexOfX != Old_index && Old_alLastIndexOfX != Old_index && Old_alIndexOfX != New_index && New_alIndexOfX == New_index && Old_alLastIndexOfX != New_index && New_alIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX) && (!(New_alIndexOfX == Old_alIndexOfX)))))

simplified postcondition: ((New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && Old_alContainsX && New_alIndexOfX == 0 && New_alLastIndexOfX == Old_alLastIndexOfX && New_alIndexOfX == Old_alIndexOfX) || (New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_alIndexOfX == New_index && (!(Old_alLastIndexOfX == New_alIndexOfX)) && (!(New_alIndexOfX == Old_alIndexOfX))))

predicates: New_alIndexOfX == Old_alIndexOfX

Any: reject

L: reject

SubL: Pass

=====
k == 2

learned postcondition: ((New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && Old_index != Old_alCount && New_index != Old_alCount && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && Old_index != New_alCount && New_index != New_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount) && ((((Old_alContainsX && New_alLastIndexOfX == Old_alCount - 1) && (((New_x == 0 &&  New_index == 0 &&  New_alIndexOfX == 0 &&  New_alLastIndexOfX ==                          Old_alLastIndexOfX &&  Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount &&  Old_index == Old_x &&  New_index == Old_x &&  Old_alIndexOfX == Old_x &&  New_alIndexOfX == Old_x &&  Old_index == New_x &&  Old_alIndexOfX == New_x &&  New_alIndexOfX == New_x &&  Old_alIndexOfX == Old_index &&  New_alIndexOfX == Old_index &&  Old_alIndexOfX == New_index &&  New_alIndexOfX == New_index) && New_index == New_x) || ((Old_index != Old_x &&  New_index != Old_x &&  Old_index != New_x &&  New_index != New_x) && (!(New_index == New_x))))) && New_alIndexOfX == Old_alIndexOfX) || (((New_alIndexOfX == Old_index && Old_alIndexOfX != Old_index && Old_alLastIndexOfX != Old_index && Old_alIndexOfX != New_index && New_alIndexOfX == New_index && Old_alLastIndexOfX != New_index && New_alIndexOfX != Old_alIndexOfX && Old_alLastIndexOfX != New_alIndexOfX) && (((New_x == Old_alCount &&  New_alLastIndexOfX == Old_index &&  (!(Old_alContainsX)) &&  Old_x == Old_alCount &&  Old_x == New_alCount &&  Old_index != Old_x &&  New_index != Old_x &&  Old_alIndexOfX != Old_x &&  New_alIndexOfX != Old_x &&  Old_alLastIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  Old_index != New_x &&  New_index != New_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX != New_x &&  Old_alLastIndexOfX != New_x &&  New_alLastIndexOfX != New_x &&  New_alLastIndexOfX == New_index &&  Old_alLastIndexOfX ==                          Old_alIndexOfX &&  New_alLastIndexOfX !=                          Old_alIndexOfX &&  New_alLastIndexOfX ==                          New_alIndexOfX &&  New_alLastIndexOfX !=                          Old_alLastIndexOfX) && New_x == New_alCount) || ((Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount) && (!(New_x == New_alCount))))) && (!(New_alIndexOfX == Old_alIndexOfX)))))

simplified postcondition: ((New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && (!(Old_alIndexOfX == New_alCount)) && Old_alContainsX && New_alLastIndexOfX == -1 + Old_alCount && New_alIndexOfX == 0 && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_alIndexOfX == New_index) || (New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && New_index == Old_index && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && Old_alContainsX && New_alLastIndexOfX == -1 + Old_alCount && (!(New_index == New_x)) && New_alIndexOfX == Old_alIndexOfX) || (New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_alIndexOfX == Old_index && New_alIndexOfX == New_index && (!(Old_alContainsX)) && (!(New_alIndexOfX == Old_alIndexOfX)) && Old_alLastIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX) || (New_alContainsX && New_alCount == Old_alCount && New_x == Old_x && (!(New_index == New_alCount)) && (!(Old_alIndexOfX == New_alCount)) && (!(Old_alLastIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_alIndexOfX == Old_index && New_alIndexOfX == New_index && (!(Old_alLastIndexOfX == New_alIndexOfX)) && (!(New_x == New_alCount)) && (!(New_alIndexOfX == Old_alIndexOfX))))

predicates: New_alIndexOfX == Old_alIndexOfX

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_GetContract

Disjunctive (PexChoose): False
Disjunctive (Alternate Semantics): False
Disjunctive (Truly): False

=====
k == 0

learned postcondition: (New_alCount == Old_alCount && New_index == Old_index && Old_index != Old_alCount && New_index != Old_alCount && Old_index != New_alCount && New_index != New_alCount)

simplified postcondition: ((New_alCount == Old_alCount && New_index == Old_index && (!(New_index == New_alCount))))

predicates: None

Any: Pass

L: Pass

SubL: Pass

=====
k == 1

learned postcondition: (New_alCount == Old_alCount && New_index == Old_index && Old_index != Old_alCount && New_index != Old_alCount && Old_index != New_alCount && New_index != New_alCount)

simplified postcondition: ((New_alCount == Old_alCount && New_index == Old_index && (!(New_index == New_alCount))))

predicates: None

Any: Pass

L: Pass

SubL: Pass

=====
k == 2

learned postcondition: (New_alCount == Old_alCount && New_index == Old_index && Old_index != Old_alCount && New_index != Old_alCount && Old_index != New_alCount && New_index != New_alCount)

simplified postcondition: ((New_alCount == Old_alCount && New_index == Old_index && (!(New_index == New_alCount))))

predicates: None

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_ContainsContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount)

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && (!(New_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount))))

predicates: None

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount) && (((New_Ret && Old_alContainsX) && New_alContainsX) || ((New_alLastIndexOfX == Old_alIndexOfX && (!(New_Ret)) && (!(Old_alContainsX)) && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX) && (!(New_alContainsX)))))

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && (!(New_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_Ret && Old_alContainsX && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && (!(New_alLastIndexOfX == New_alCount)) && (!(New_Ret)) && (!(Old_alContainsX)) && New_alLastIndexOfX == New_alIndexOfX && (!(New_alContainsX))))

predicates: New_alContainsX

Any: reject

L: reject

SubL: Pass

=====
k == 2

learned postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount) && ((((New_Ret && Old_alContainsX) && (((New_alLastIndexOfX ==                          Old_alIndexOfX &&  Old_alLastIndexOfX ==                          Old_alIndexOfX &&  Old_alLastIndexOfX ==                          New_alIndexOfX) && New_alLastIndexOfX == New_alIndexOfX) || ((New_alIndexOfX == 0 &&  Old_alLastIndexOfX !=                          Old_alIndexOfX &&  New_alLastIndexOfX !=                          Old_alIndexOfX &&  Old_alLastIndexOfX !=                          New_alIndexOfX &&  New_alLastIndexOfX !=                          New_alIndexOfX) && (!(New_alLastIndexOfX ==                          New_alIndexOfX))))) && New_alContainsX) || (((New_alLastIndexOfX == Old_alIndexOfX && (!(New_Ret)) && (!(Old_alContainsX)) && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX) && (((New_x == Old_alCount &&  Old_x == Old_alCount &&  Old_x == New_alCount &&  Old_alIndexOfX != Old_x &&  New_alIndexOfX != Old_x &&  Old_alLastIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX != New_x &&  Old_alLastIndexOfX != New_x &&  New_alLastIndexOfX != New_x) && New_x == New_alCount) || ((Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount) && (!(New_x == New_alCount))))) && (!(New_alContainsX)))))

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && (!(New_alLastIndexOfX == New_alCount)) && New_Ret && Old_alContainsX && New_alLastIndexOfX == New_alIndexOfX && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && (!(New_alIndexOfX == New_alCount)) && (!(New_alLastIndexOfX == New_alCount)) && New_Ret && Old_alContainsX && New_alIndexOfX == 0 && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && (!(New_alLastIndexOfX == New_alCount)) && (!(New_Ret)) && (!(Old_alContainsX)) && New_alLastIndexOfX == New_alIndexOfX && (!(New_alContainsX))))

predicates: New_alContainsX

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_IndexOfContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_Ret != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_Ret == New_alIndexOfX)

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && (!(New_alLastIndexOfX == New_alCount)) && (!(New_Ret == New_alCount)) && New_Ret == New_alIndexOfX))

predicates: None

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_Ret != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_Ret == New_alIndexOfX) && (((Old_alContainsX) && New_alContainsX) || ((New_alLastIndexOfX == Old_alIndexOfX && (!(Old_alContainsX)) && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_Ret == Old_alLastIndexOfX && New_Ret == New_alLastIndexOfX) && (!(New_alContainsX)))))

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && (!(New_alLastIndexOfX == New_alCount)) && (!(New_Ret == New_alCount)) && New_Ret == New_alIndexOfX && Old_alContainsX && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && (!(New_Ret == New_alCount)) && New_Ret == New_alIndexOfX && (!(Old_alContainsX)) && New_Ret == New_alLastIndexOfX && (!(New_alContainsX))))

predicates: New_alContainsX

Any: Pass

L: Pass

SubL: Pass

=====
k == 2

learned postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_Ret != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_Ret == New_alIndexOfX) && ((((Old_alContainsX) && (((New_alLastIndexOfX ==                          Old_alIndexOfX &&  Old_alLastIndexOfX ==                          Old_alIndexOfX &&  Old_alLastIndexOfX ==                          New_alIndexOfX &&  New_alLastIndexOfX ==                          New_alIndexOfX &&  New_Ret == Old_alLastIndexOfX) && New_Ret == New_alLastIndexOfX) || ((Old_alLastIndexOfX !=                          Old_alIndexOfX &&  New_alLastIndexOfX !=                          Old_alIndexOfX &&  Old_alLastIndexOfX !=                          New_alIndexOfX &&  New_alLastIndexOfX !=                          New_alIndexOfX &&  New_Ret != Old_alLastIndexOfX &&  New_Ret != New_alLastIndexOfX) && (!(New_Ret == New_alLastIndexOfX))))) && New_alContainsX) || (((New_alLastIndexOfX == Old_alIndexOfX && (!(Old_alContainsX)) && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_Ret == Old_alLastIndexOfX && New_Ret == New_alLastIndexOfX) && (((New_x == Old_alCount &&  Old_x == Old_alCount &&  Old_x == New_alCount &&  Old_alIndexOfX != Old_x &&  New_alIndexOfX != Old_x &&  Old_alLastIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  New_Ret != Old_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX != New_x &&  Old_alLastIndexOfX != New_x &&  New_alLastIndexOfX != New_x &&  New_Ret != New_x) && New_x == New_alCount) || ((Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount) && (!(New_x == New_alCount))))) && (!(New_alContainsX)))))

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && (!(New_alLastIndexOfX == New_alCount)) && (!(New_Ret == New_alCount)) && New_Ret == New_alIndexOfX && Old_alContainsX && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alIndexOfX && (!(New_Ret == New_alCount)) && New_Ret == New_alIndexOfX && (!(Old_alContainsX)) && New_Ret == New_alLastIndexOfX && (!(New_alContainsX))))

predicates: New_alContainsX

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_LastIndexOfContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

=====
k == 0

learned postcondition: (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alLastIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_Ret != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_Ret == New_alLastIndexOfX)

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_Ret == Old_alLastIndexOfX && (!(New_alIndexOfX == New_alCount)) && (!(New_Ret == New_alCount)) && New_Ret == New_alLastIndexOfX))

predicates: None

Any: reject

L: reject

SubL: Pass

=====
k == 1

learned postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alLastIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_Ret != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_Ret == New_alLastIndexOfX) && (((Old_alContainsX) && New_alContainsX) || ((New_alLastIndexOfX == Old_alIndexOfX && New_Ret == Old_alIndexOfX && (!(Old_alContainsX)) && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_Ret == New_alIndexOfX) && (!(New_alContainsX)))))

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_Ret == Old_alLastIndexOfX && (!(New_alIndexOfX == New_alCount)) && (!(New_Ret == New_alCount)) && New_Ret == New_alLastIndexOfX && Old_alContainsX && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_Ret == Old_alLastIndexOfX && (!(New_Ret == New_alCount)) && New_Ret == New_alLastIndexOfX && (!(Old_alContainsX)) && New_Ret == New_alIndexOfX && (!(New_alContainsX))))

predicates: New_alContainsX

Any: Pass

L: Pass

SubL: Pass

=====
k == 2

learned postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_alLastIndexOfX == Old_alLastIndexOfX && New_Ret == Old_alLastIndexOfX && Old_alIndexOfX != Old_alCount && New_alIndexOfX != Old_alCount && Old_alLastIndexOfX != Old_alCount && New_alLastIndexOfX != Old_alCount && New_Ret != Old_alCount && Old_alIndexOfX != New_alCount && New_alIndexOfX != New_alCount && Old_alLastIndexOfX != New_alCount && New_alLastIndexOfX != New_alCount && New_Ret != New_alCount && New_Ret == New_alLastIndexOfX) && ((((Old_alContainsX) && (((New_alLastIndexOfX ==                          Old_alIndexOfX &&  New_Ret == Old_alIndexOfX &&  Old_alLastIndexOfX ==                          Old_alIndexOfX &&  Old_alLastIndexOfX ==                          New_alIndexOfX &&  New_alLastIndexOfX ==                          New_alIndexOfX) && New_Ret == New_alIndexOfX) || ((Old_alLastIndexOfX !=                          Old_alIndexOfX &&  New_alLastIndexOfX !=                          Old_alIndexOfX &&  New_Ret != Old_alIndexOfX &&  Old_alLastIndexOfX !=                          New_alIndexOfX &&  New_alLastIndexOfX !=                          New_alIndexOfX &&  New_Ret != New_alIndexOfX) && (!(New_Ret == New_alIndexOfX))))) && New_alContainsX) || (((New_alLastIndexOfX == Old_alIndexOfX && New_Ret == Old_alIndexOfX && (!(Old_alContainsX)) && Old_alLastIndexOfX == Old_alIndexOfX && Old_alLastIndexOfX == New_alIndexOfX && New_alLastIndexOfX == New_alIndexOfX && New_Ret == New_alIndexOfX) && (((New_x == Old_alCount &&  Old_x == Old_alCount &&  Old_x == New_alCount &&  Old_alIndexOfX != Old_x &&  New_alIndexOfX != Old_x &&  Old_alLastIndexOfX != Old_x &&  New_alLastIndexOfX != Old_x &&  New_Ret != Old_x &&  Old_alIndexOfX != New_x &&  New_alIndexOfX != New_x &&  Old_alLastIndexOfX != New_x &&  New_alLastIndexOfX != New_x &&  New_Ret != New_x) && New_x == New_alCount) || ((Old_x != Old_alCount &&  New_x != Old_alCount &&  Old_x != New_alCount &&  New_x != New_alCount) && (!(New_x == New_alCount))))) && (!(New_alContainsX)))))

simplified postcondition: ((New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_Ret == Old_alLastIndexOfX && (!(New_alIndexOfX == New_alCount)) && (!(New_Ret == New_alCount)) && New_Ret == New_alLastIndexOfX && Old_alContainsX && New_alContainsX) || (New_alCount == Old_alCount && New_x == Old_x && New_alIndexOfX == Old_alIndexOfX && New_Ret == Old_alLastIndexOfX && (!(New_Ret == New_alCount)) && New_Ret == New_alLastIndexOfX && (!(Old_alContainsX)) && New_Ret == New_alIndexOfX && (!(New_alContainsX))))

predicates: New_alContainsX

Any: Pass

L: Pass

SubL: Pass

---------------------
PUT_CountContract

Disjunctive (PexChoose): False
Disjunctive (Alternate Semantics): False
Disjunctive (Truly): False

=====
k == 0

learned postcondition: (New_alCount == Old_alCount && New_Ret == Old_alCount && New_Ret == New_alCount)

simplified postcondition: ((New_Ret == Old_alCount && New_Ret == New_alCount))

predicates: None

Any: Pass

L: Pass

SubL: Pass

=====
k == 1

learned postcondition: (New_alCount == Old_alCount && New_Ret == Old_alCount && New_Ret == New_alCount)

simplified postcondition: ((New_Ret == Old_alCount && New_Ret == New_alCount))

predicates: None

Any: Pass

L: Pass

SubL: Pass

=====
k == 2

learned postcondition: (New_alCount == Old_alCount && New_Ret == Old_alCount && New_Ret == New_alCount)

simplified postcondition: ((New_Ret == Old_alCount && New_Ret == New_alCount))

predicates: None

Any: Pass

L: Pass

SubL: Pass

---------------------
