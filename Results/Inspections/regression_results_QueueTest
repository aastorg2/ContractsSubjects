Problem: QueueTest

PUT: PUT_EnqueueContract

Predicate root : Old_s1ContainsX

Predicate root : Old_s1ContainsX

Predicate root Right : Old_x == Old_s1Count

Predicate root : Old_s1ContainsX

Predicate root Right : Old_x == Old_s1Count

Final Tree ====
Round: 1
Predicate root : Old_s1ContainsX

Predicate root Right : Old_x == Old_s1Count

Predicate root : Not(Old_s1ContainsX)

Predicate root : Not(Old_s1ContainsX)

Predicate root Right : Old_Top != Old_s1Count

Predicate root : Not(Old_s1ContainsX)

Predicate root Right : Old_Top != Old_s1Count

Predicate root : Old_Top != Old_s1Count

Predicate root Right : Old_x == New_Top

Predicate root Right Right : Not(Old_s1ContainsX)

Predicate root : Old_Top != Old_s1Count

Predicate root Right : Old_x == New_Top

Predicate root Right Right : Not(Old_s1ContainsX)

Predicate root : Old_Top != Old_s1Count

Predicate root Right : Old_x == New_Top

Predicate root Right Right : Not(Old_s1ContainsX)

Predicate root Right Right Right : Old_x == New_s1Count

Predicate root : Old_Top != Old_s1Count

Predicate root Right : Old_x == New_Top

Predicate root Right Right : Not(Old_s1ContainsX)

Predicate root Right Right Right : Old_x == New_s1Count

Final Tree ====
Round: 2
Predicate root : Old_Top != Old_s1Count

Predicate root Right : Old_x == New_Top

Predicate root Right Right : Not(Old_s1ContainsX)

Predicate root Right Right Right : Old_x == New_s1Count

Predicate root : Old_s1ContainsX

Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top != Old_s1Count

Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top != Old_s1Count

Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top == Old_s1Count

Predicate root Right Right : Old_Top != Old_s1Count

Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top == Old_s1Count

Predicate root Right Right : Old_Top != Old_s1Count

Final Tree ====
Round: 3
Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top == Old_s1Count

Predicate root Right Right : Old_Top != Old_s1Count

Predicate root : Old_s1ContainsX

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root Right Right : Old_Top != New_s1Count

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root Right Right : Old_Top != New_s1Count

Final Tree ====
Round: 4
Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root Right Right : Old_Top != New_s1Count

Predicate root : Old_s1ContainsX

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top != New_s1Count

Predicate root Right Right : Old_s1Count < New_Top

Predicate root : Old_s1ContainsX

Predicate root Right : Old_Top != New_s1Count

Predicate root Right Right : Old_s1Count < New_Top

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root Right Right : Old_Top != New_s1Count

Predicate root Right Right Right : Not(Old_s1ContainsX)

Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root Right Right : Old_Top != New_s1Count

Predicate root Right Right Right : Not(Old_s1ContainsX)

Final Tree ====
Round: 5
Predicate root : Old_s1ContainsX

Predicate root Right : Old_s1Count < New_Top

Predicate root Right Right : Old_Top != New_s1Count

Predicate root Right Right Right : Not(Old_s1ContainsX)

Predicate root : Old_s1ContainsX

Predicate root : Old_s1ContainsX

Predicate root Right : New_Top != Old_Top

Predicate root : Old_s1ContainsX

Predicate root Right : New_Top != Old_Top

Final Tree ====
Round: 6
Predicate root : Old_s1ContainsX

Predicate root Right : New_Top != Old_Top

===== Final Result for PUT_EnqueueContract

postcondition: 
((New_s1ContainsX && New_s1Count == Old_s1Count + 1 && New_s1Count != Old_s1Count && Old_s1Count < New_s1Count && Old_s1Count <= New_s1Count && 0 <= Old_s1Count && -1 < Old_s1Count && -1 <= Old_s1Count && 1 <= New_s1Count && 0 < New_s1Count && 0 <= New_s1Count && -1 < New_s1Count && -1 <= New_s1Count) && (((!(Old_s1ContainsX)) ||   ((Old_s1ContainsX && New_Top == Old_Top && New_Top <= Old_Top && Old_Top <= New_Top && 1 <= Old_s1Count && 0 < Old_s1Count && 1 < New_s1Count) && (((!(New_Top != Old_Top)) || false) && (New_Top != Old_Top || true)))) && (Old_s1ContainsX || ((!(Old_s1ContainsX))))))
rounds: 7

simplified post: 
((New_s1ContainsX && New_s1Count == 1 + Old_s1Count && (!(Old_s1ContainsX)) && New_s1Count >= 1) || (New_s1ContainsX && New_s1Count == 1 + Old_s1Count && New_Top == Old_Top && New_s1Count >= 2))
pex time: 306.5486717224121

learn time: 12347.763110399246

Samples: 60

PUT: PUT_DequeueContract

Predicate root : New_s1ContainsNewRet

Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Final Tree ====
Round: 1
Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Predicate root : New_s1ContainsNewRet

Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Final Tree ====
Round: 2
Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Predicate root : New_s1ContainsNewRet

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == Old_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == Old_s1Count

Final Tree ====
Round: 3
Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == Old_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Top == Old_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Top == Old_s1Count

Final Tree ====
Round: 4
Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Top == Old_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == New_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == New_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == New_s1Count

Predicate root Right Right : Old_Top != New_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == New_s1Count

Predicate root Right Right : Old_Top != New_s1Count

Final Tree ====
Round: 5
Predicate root : New_s1ContainsNewRet

Predicate root Right : New_Ret == New_s1Count

Predicate root Right Right : Old_Top != New_s1Count

Predicate root : New_s1ContainsNewRet

Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

Final Tree ====
Round: 6
Predicate root : Not(New_s1ContainsNewRet)

Predicate root Right : New_s1ContainsNewRet

===== Final Result for PUT_DequeueContract

postcondition: 
((New_s1Count == Old_s1Count - 1 && New_Ret == Old_Top && New_s1Count != Old_s1Count && New_s1Count < Old_s1Count && New_s1Count <= Old_s1Count && New_Ret <= Old_Top && Old_Top <= New_Ret && 1 <= Old_s1Count && 0 < Old_s1Count && 0 <= Old_s1Count && -1 < Old_s1Count && -1 <= Old_s1Count && 0 <= New_s1Count && -1 < New_s1Count && -1 <= New_s1Count) && (((!((!(New_s1ContainsNewRet)))) ||   (((!(New_s1ContainsNewRet))) && (((!(New_s1ContainsNewRet)) || false) && (New_s1ContainsNewRet || true)))) && ((!(New_s1ContainsNewRet)) ||   (New_s1ContainsNewRet && 1 < Old_s1Count && 1 <= New_s1Count && 0 < New_s1Count))))
rounds: 7

simplified post: 
((New_s1Count == -1 + Old_s1Count && New_Ret <= Old_Top && Old_Top <= New_Ret && (!(New_s1ContainsNewRet)) && New_s1Count >= 0) || (New_s1Count == -1 + Old_s1Count && New_Ret <= Old_Top && Old_Top <= New_Ret && New_s1Count >= 1))
pex time: 149.94522523880005

learn time: 3661.47013258934

Samples: 51

PUT: PUT_PeekContract

Predicate root : 1 < New_s1Count

Predicate root : 1 == New_s1Count

Predicate root Right : 1 < New_s1Count

Predicate root : 1 == New_s1Count

Predicate root Right : 1 < New_s1Count

Final Tree ====
Round: 1
Predicate root : 1 == New_s1Count

Predicate root Right : 1 < New_s1Count

Predicate root : Old_s1Count <= New_Ret

Predicate root : New_Ret <= Old_s1Count

Predicate root Right : Old_s1Count <= New_Ret

Predicate root : New_Ret <= Old_s1Count

Predicate root Right : Old_s1Count <= New_Ret

Final Tree ====
Round: 2
Predicate root : New_Ret <= Old_s1Count

Predicate root Right : Old_s1Count <= New_Ret

Predicate root : Old_s1Count <= New_Ret

Predicate root : Old_s1Count <= New_Ret

Predicate root Right : 1 < New_s1Count

Predicate root : Old_s1Count <= New_Ret

Predicate root Right : 1 < New_s1Count

Predicate root : Old_s1Count <= New_Ret

Predicate root Right : 1 < New_s1Count

Predicate root Right Right : New_Ret < Old_s1Count

Predicate root : Old_s1Count <= New_Ret

Predicate root Right : 1 < New_s1Count

Predicate root Right Right : New_Ret < Old_s1Count

Final Tree ====
Round: 3
Predicate root : Old_s1Count <= New_Ret

Predicate root Right : 1 < New_s1Count

Predicate root Right Right : New_Ret < Old_s1Count

Predicate root : New_s1Count < New_Ret

Predicate root : New_s1Count < New_Ret

Predicate root Right : New_Ret < New_s1Count

Predicate root : New_s1Count < New_Ret

Predicate root Right : New_Ret < New_s1Count

Final Tree ====
Round: 4
Predicate root : New_s1Count < New_Ret

Predicate root Right : New_Ret < New_s1Count

Predicate root : New_Ret <= Old_s1Count

Predicate root : New_Ret != New_s1Count

Predicate root Right : New_Ret <= Old_s1Count

Predicate root : New_Ret != New_s1Count

Predicate root Right : New_Ret <= Old_s1Count

Predicate root : New_Ret <= Old_s1Count

Predicate root Right : 1 == New_Ret

Predicate root Right Right : New_Ret != New_s1Count

Predicate root : New_Ret <= Old_s1Count

Predicate root Right : 1 == New_Ret

Predicate root Right Right : New_Ret != New_s1Count

Final Tree ====
Round: 5
Predicate root : New_Ret <= Old_s1Count

Predicate root Right : 1 == New_Ret

Predicate root Right Right : New_Ret != New_s1Count

Predicate root : New_Ret <= Old_s1Count

Predicate root : New_Ret <= Old_s1Count

Predicate root Right : Old_s1Count < New_Ret

Predicate root : New_Ret <= Old_s1Count

Predicate root Right : Old_s1Count < New_Ret

Final Tree ====
Round: 6
Predicate root : New_Ret <= Old_s1Count

Predicate root Right : Old_s1Count < New_Ret

===== Final Result for PUT_PeekContract

postcondition: 
((New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_s1Count <= Old_s1Count && Old_s1Count <= New_s1Count && 1 <= Old_s1Count && 0 < Old_s1Count && 0 <= Old_s1Count && -1 < Old_s1Count && -1 <= Old_s1Count && 1 <= New_s1Count && 0 < New_s1Count && 0 <= New_s1Count && -1 < New_s1Count && -1 <= New_s1Count) && (((!(New_Ret <= Old_s1Count)) ||   ((New_Ret <= Old_s1Count && New_Ret <= New_s1Count) && (((!(Old_s1Count < New_Ret)) || false) && (Old_s1Count < New_Ret || true)))) && (New_Ret <= Old_s1Count ||   (New_Ret != Old_s1Count && New_Ret != New_s1Count && Old_s1Count < New_Ret && Old_s1Count <= New_Ret && New_s1Count < New_Ret && New_s1Count <= New_Ret && 1 < New_Ret && 1 <= New_Ret && 0 < New_Ret && 0 <= New_Ret && -1 < New_Ret && -1 <= New_Ret))))
rounds: 7

simplified post: 
((New_s1ContainsNewRet && New_s1Count <= Old_s1Count && Old_s1Count <= New_s1Count && New_s1Count >= 1))
pex time: 95.93239140510559

learn time: 45.67985534667969

Samples: 32

PUT: PUT_ContainsContract

Predicate root : New_Ret

Predicate root : Not(New_Ret)

Predicate root Right : New_Ret

Predicate root : Not(New_Ret)

Predicate root Right : New_Ret

Final Tree ====
Round: 1
Predicate root : Not(New_Ret)

Predicate root Right : New_Ret

Predicate root : New_Ret

Predicate root : New_Ret

Predicate root Right : New_Top < Old_s1Count

Predicate root : New_Ret

Predicate root Right : New_Top < Old_s1Count

Predicate root : New_Ret

Predicate root Right : New_Top < Old_s1Count

Predicate root Right Right : Old_Top == New_s1Count

Predicate root : New_Ret

Predicate root Right : New_Top < Old_s1Count

Predicate root Right Right : Old_Top == New_s1Count

Final Tree ====
Round: 2
Predicate root : New_Ret

Predicate root Right : New_Top < Old_s1Count

Predicate root Right Right : Old_Top == New_s1Count

Predicate root : New_Ret

Predicate root : New_Ret

Predicate root Right : Old_s1Count < Old_Top

Predicate root : New_Ret

Predicate root Right : Old_s1Count < Old_Top

Predicate root : New_Ret

Predicate root Right : Old_s1Count < Old_Top

Predicate root Right Right : 0 == New_Top

Predicate root : New_Ret

Predicate root Right : Old_s1Count < Old_Top

Predicate root Right Right : 0 == New_Top

Final Tree ====
Round: 3
Predicate root : New_Ret

Predicate root Right : Old_s1Count < Old_Top

Predicate root Right Right : 0 == New_Top

Predicate root : New_Ret

Predicate root : New_Ret

Predicate root Right : New_Top <= Old_s1Count

Predicate root : New_Ret

Predicate root Right : New_Top <= Old_s1Count

Predicate root : New_Ret

Predicate root Right : New_Top <= Old_s1Count

Predicate root Right Right : 0 < New_Top

Predicate root : New_Ret

Predicate root Right : New_Top <= Old_s1Count

Predicate root Right Right : 0 < New_Top

Predicate root : New_Ret

Predicate root Right : Old_Top != Old_s1Count

Predicate root Right Right : New_Top <= Old_s1Count

Predicate root Right Right Right : 0 < New_Top

Predicate root : New_Ret

Predicate root Right : Old_Top != Old_s1Count

Predicate root Right Right : New_Top <= Old_s1Count

Predicate root Right Right Right : 0 < New_Top

Final Tree ====
Round: 4
Predicate root : New_Ret

Predicate root Right : Old_Top != Old_s1Count

Predicate root Right Right : New_Top <= Old_s1Count

Predicate root Right Right Right : 0 < New_Top

Predicate root : New_Ret

Predicate root : Not(New_Ret)

Predicate root Right : New_Ret

Predicate root : Not(New_Ret)

Predicate root Right : New_Ret

Final Tree ====
Round: 5
Predicate root : Not(New_Ret)

Predicate root Right : New_Ret

===== Final Result for PUT_ContainsContract

postcondition: 
((New_s1Count == Old_s1Count && New_s1Count <= Old_s1Count && Old_s1Count <= New_s1Count && 0 <= Old_s1Count && -1 < Old_s1Count && -1 <= Old_s1Count && 0 <= New_s1Count && -1 < New_s1Count && -1 <= New_s1Count) && (((!((!(New_Ret)))) ||   (((!(New_Ret))) && (((!(New_Ret)) || false) && (New_Ret || true)))) && ((!(New_Ret)) ||   (New_Ret && New_Top == Old_Top && New_Top <= Old_Top && Old_Top <= New_Top && 1 <= Old_s1Count && 0 < Old_s1Count && 1 <= New_s1Count && 0 < New_s1Count))))
rounds: 6

simplified post: 
((New_s1Count <= Old_s1Count && Old_s1Count <= New_s1Count && (!(New_Ret)) && New_s1Count >= 0) || (New_s1Count <= Old_s1Count && Old_s1Count <= New_s1Count && New_Top <= Old_Top && Old_Top <= New_Top && New_s1Count >= 1))
pex time: 93.30307674407959

learn time: 2002.3108642101288

Samples: 41

PUT: PUT_CountContract

Predicate root : New_Ret == Old_Top

Predicate root : New_Ret != Old_Top

Predicate root Right : New_Ret == Old_Top

Predicate root : New_Ret != Old_Top

Predicate root Right : New_Ret == Old_Top

Final Tree ====
Round: 1
Predicate root : New_Ret != Old_Top

Predicate root Right : New_Ret == Old_Top

Predicate root : New_Top == Old_Top

Predicate root : New_Top == Old_Top

Predicate root Right : 1 == Old_Top

Predicate root : New_Top == Old_Top

Predicate root Right : 1 == Old_Top

Final Tree ====
Round: 2
Predicate root : New_Top == Old_Top

Predicate root Right : 1 == Old_Top

Predicate root : New_Top < Old_Top

Predicate root : New_Top < Old_Top

Predicate root Right : 1 < Old_Top

Predicate root : New_Top < Old_Top

Predicate root Right : 1 < Old_Top

Final Tree ====
Round: 3
Predicate root : New_Top < Old_Top

Predicate root Right : 1 < Old_Top

Predicate root : Old_Top < New_Top

Predicate root : Old_Top < New_Top

Predicate root Right : New_Ret == New_Top

Predicate root : Old_Top < New_Top

Predicate root Right : New_Ret == New_Top

Final Tree ====
Round: 4
Predicate root : Old_Top < New_Top

Predicate root Right : New_Ret == New_Top

Predicate root : New_Top < Old_Top

Predicate root : Old_Top <= New_Top

Predicate root Right : New_Top < Old_Top

Predicate root : Old_Top <= New_Top

Predicate root Right : New_Top < Old_Top

Final Tree ====
Round: 5
Predicate root : Old_Top <= New_Top

Predicate root Right : New_Top < Old_Top

Predicate root : New_Top < Old_Top

Predicate root : Old_Top <= New_Top

Predicate root Right : New_Top < Old_Top

Predicate root : Old_Top <= New_Top

Predicate root Right : New_Top < Old_Top

Final Tree ====
Round: 6
Predicate root : Old_Top <= New_Top

Predicate root Right : New_Top < Old_Top

Predicate root : New_Top < Old_Top

Predicate root : New_Top < Old_Top

Predicate root Right : Old_Top <= New_Top

Predicate root : New_Top < Old_Top

Predicate root Right : Old_Top <= New_Top

Final Tree ====
Round: 7
Predicate root : New_Top < Old_Top

Predicate root Right : Old_Top <= New_Top

===== Final Result for PUT_CountContract

postcondition: 
((0 <= New_Ret && -1 < New_Ret && -1 <= New_Ret) && (((!(New_Top < Old_Top)) ||   ((New_Top != Old_Top && New_Top < Old_Top && New_Top <= Old_Top && 0 == New_Ret) && (((!(Old_Top <= New_Top)) || false) && (Old_Top <= New_Top || true)))) && (New_Top < Old_Top || (Old_Top <= New_Top))))
rounds: 8

simplified post: 
((Old_Top <= New_Top && New_Ret >= 0) || (New_Ret == 0))
pex time: 88.2282042503357

learn time: 213.96838855743408

Samples: 37
