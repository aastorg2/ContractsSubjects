Problem: QueueTest

---------------------
PUT_EnqueueContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Precis

Truly Safe: True

Analysis: (New_s1Count == 1 + Old_s1Count && New_s1ContainsX) holds becuase the new item will be insterted at the end of the Queue. !(Old_s1ContainsX) If the item to enqueue was not present in the pre state, then it holds that there will be at least one element in the post state. If not, then it holds that there will be at least two elemets in the post state.

learned postcondition: (((New_s1Count == 1 + Old_s1Count && New_s1ContainsX && New_s1Count >= 1)) && ((!(Old_s1ContainsX)) || (New_Top == Old_Top && New_s1Count >= 2 && Old_s1Count >= 1)))

simplified postcondition: ((New_s1Count == 1 + Old_s1Count && New_s1ContainsX && (!(Old_s1ContainsX)) && New_s1Count >= 1) || (New_s1Count == 1 + Old_s1Count && New_s1ContainsX && New_Top == Old_Top && Old_s1Count >= 1))

CNF simplified: ((New_s1Count == 1 + Old_s1Count && New_s1ContainsX) && (((!(Old_s1ContainsX)) && New_s1Count >= 1) || (New_Top == Old_Top && New_s1Count >= 1)))

CNF simplified (smt): (and (and (= New_s1Count (+ 1 Old_s1Count)) New_s1ContainsX) (or (and (not Old_s1ContainsX) (>= New_s1Count 1)) (and (= New_Top Old_Top) (>= New_s1Count 1))))

Predicate chosen at root : Not(Old_s1ContainsX)

rounds: 5

pex time: 228.7134792804718

learn time: 508.9372580051422

Samples: 36

---------------------
PUT_DequeueContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Precis

Truly Safe: True

Analysis: (New_Ret == Old_Top && New_s1Count == -1 + Old_s1Count) holds because the returned item will be from the front and the number of elements decreases by one in the post state. !(New_s1ContainsNewRet) If the removed item is no longer in the Queue, there will be at least zero elements in the post state. If not, there will be at least one elements in the post state.

learned postcondition: (((New_Ret == Old_Top && New_s1Count == -1 + Old_s1Count && New_s1Count >= 0)) && ((!(New_s1ContainsNewRet)) || (Old_s1Count >= 2 && New_s1Count >= 1)))

simplified postcondition: ((New_Ret == Old_Top && New_s1Count == -1 + Old_s1Count && (!(New_s1ContainsNewRet)) && New_s1Count >= 0) || (New_Ret == Old_Top && New_s1Count == -1 + Old_s1Count && New_s1Count >= 1))

CNF simplified: ((New_Ret == Old_Top && New_s1Count == -1 + Old_s1Count) && (((!(New_s1ContainsNewRet)) && New_s1Count >= 0) || (New_s1Count >= 1)))

CNF simplified (smt): (and (and (= New_Ret Old_Top) (= New_s1Count (+ -1 Old_s1Count))) (or (and (not New_s1ContainsNewRet) (>= New_s1Count 0)) (>= New_s1Count 1)))

Predicate chosen at root : Not(New_s1ContainsNewRet)

rounds: 4

pex time: 48.26637125015259

learn time: 183.36298179626465

Samples: 30

---------------------
PUT_PeekContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Precis

Truly Safe: True

Analysis: (New_s1Count == Old_s1Count && New_s1ContainsNewRet && Old_s1Count >= 1) holds because there is at least one element present and the state of the Queue does not change bewteen pre and post.

learned postcondition: (((New_s1Count == Old_s1Count && New_s1ContainsNewRet && Old_s1Count >= 1)) && (New_Ret >= 0 || ((!(Old_s1Count <= New_Ret)) && (!(New_s1Count <= New_Ret)))))

simplified postcondition: ((New_s1Count == Old_s1Count && New_s1ContainsNewRet && Old_s1Count >= 1))

CNF simplified: ((New_s1Count == Old_s1Count && New_s1ContainsNewRet && Old_s1Count >= 1))

CNF simplified (smt): (and (= New_s1Count Old_s1Count) New_s1ContainsNewRet (>= Old_s1Count 1))

Predicate chosen at root : 0 <= New_Ret

rounds: 4

pex time: 62.92612171173096

learn time: 11.810110092163086

Samples: 14

---------------------
PUT_ContainsContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Precis

Truly Safe: True

Analysis: (New_s1Count == Old_s1Count) holds because the number of elements does not change between states. !(New_Ret) If the queried item is not present, then it holds that there are at least zero elements in the post state. If not, then it holds that there is at least one element present in the post state.

learned postcondition: (((New_s1Count == Old_s1Count && New_s1Count >= 0)) && ((!(New_Ret)) || (New_Top == Old_Top && New_s1Count >= 1 && Old_s1Count >= 1)))

simplified postcondition: ((New_s1Count == Old_s1Count && (!(New_Ret)) && New_s1Count >= 0) || (New_s1Count == Old_s1Count && New_Top == Old_Top && New_s1Count >= 1))

CNF simplified: ((New_s1Count == Old_s1Count) && (((!(New_Ret)) && New_s1Count >= 0) || (New_Top == Old_Top && New_s1Count >= 1)))

CNF simplified (smt): (and (= New_s1Count Old_s1Count) (or (and (not New_Ret) (>= New_s1Count 0)) (and (= New_Top Old_Top) (>= New_s1Count 1))))

Predicate chosen at root : Not(New_Ret)

rounds: 6

pex time: 55.38467764854431

learn time: 92.80319619178772

Samples: 31

---------------------
PUT_CountContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Precis

Truly Safe: True

Analysis: ((New_Top == Old_Top && New_Ret >= 1) || (New_Ret == 0 )) holds because the state of the Queue does not change and the number of elements is non-negative.

learned postcondition: ((New_Ret >= 0) && ((New_Top == Old_Top && New_Ret >= 1) || New_Ret == 0))

simplified postcondition: ((New_Top == Old_Top && New_Ret >= 1) || New_Ret == 0)

CNF simplified: (((New_Top == Old_Top && New_Ret >= 1) || (New_Ret == 0 )))

CNF simplified (smt): (or (and (= New_Top Old_Top) (>= New_Ret 1)) (= New_Ret 0))

Predicate chosen at root : 0 == New_Ret

rounds: 6

pex time: 57.333619117736816

learn time: 71.31788849830627

Samples: 27

======================
Average Rounds: 5

Average Pex Time: 90.524853801727

Average Learn Time: 173.64628691673
