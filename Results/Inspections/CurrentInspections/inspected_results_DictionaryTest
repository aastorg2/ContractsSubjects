Problem: DictionaryTest

---------------------
PUT_AddContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: ((!(Old_dContainsKeyX)) && New_dCount == 1 + Old_dCount && New_dContainsKeyX && New_dContainsValueY) holds the item to add cannot be present in the pre state and the number of elements will increase by one. !(Old_dContainsValueY) If the value to add is not present in thte pre state, then there will be at least one element in the post state. If not, then it holds that there was at least one element in the pre state.

learned postcondition: ((Old_dCount < New_dCount && Old_dCount <= New_dCount && 0 <= Old_dCount && -1 < Old_dCount && -1 <= Old_dCount && 1 <= New_dCount && 0 < New_dCount && 0 <= New_dCount && -1 < New_dCount && -1 <= New_dCount && New_dCount != Old_dCount && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount + 1 && New_dContainsKeyX && New_dContainsValueY) && ((!(Old_dContainsValueY)) || (New_dCount >= 2 && Old_dCount >= 1)))

simplified postcondition: (((!(Old_dContainsKeyX)) && New_dCount == 1 + Old_dCount && New_dContainsKeyX && New_dContainsValueY && (!(Old_dContainsValueY)) && New_dCount >= 1) || ((!(Old_dContainsKeyX)) && New_dCount == 1 + Old_dCount && New_dContainsKeyX && New_dContainsValueY && Old_dCount >= 1))

CNF simplified: (((!(Old_dContainsKeyX)) && New_dCount == 1 + Old_dCount && New_dContainsKeyX && New_dContainsValueY) && (((!(Old_dContainsValueY)) && New_dCount >= 1) || (Old_dCount >= 1)))

CNF simplified (smt): (and (and (not Old_dContainsKeyX) (= New_dCount (+ 1 Old_dCount)) New_dContainsKeyX New_dContainsValueY) (or (and (not Old_dContainsValueY) (>= New_dCount 1)) (>= Old_dCount 1)))

Predicate chosen at root : Not(Old_dContainsValueY)

rounds: 5

pex time: 623.8408360481262

learn time: 175.194589138031

Samples: 46

---------------------
PUT_RemoveContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: (!(New_dContainsKeyX)) holds because key will not be present in the post state. New_dCount == Old_dCount If the number of elements did not change, then nothing was removed. If not, then one element is removed.

learned postcondition: ((New_dCount <= Old_dCount && 0 <= Old_dCount && -1 < Old_dCount && -1 <= Old_dCount && 0 <= New_dCount && -1 < New_dCount && -1 <= New_dCount && (!(New_dContainsKeyX))) && ((New_Ret && New_dCount == -1 + Old_dCount && Old_dContainsKeyX && Old_dCount >= 1) || ((!(New_Ret)) && New_dCount == Old_dCount && (!(Old_dContainsKeyX)))))

simplified postcondition: (((!(New_dContainsKeyX)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && (!(New_Ret)) && Old_dCount >= 0) || ((!(New_dContainsKeyX)) && New_Ret && Old_dContainsKeyX && New_dCount == -1 + Old_dCount && New_dCount >= 0))

CNF simplified: (((!(New_dContainsKeyX))) && (((!(Old_dContainsKeyX)) && New_dCount == Old_dCount && (!(New_Ret)) && Old_dCount >= 0) || (New_Ret && Old_dContainsKeyX && New_dCount == -1 + Old_dCount && New_dCount >= 0)))

CNF simplified (smt): (and (not New_dContainsKeyX) (or (and (not Old_dContainsKeyX) (= New_dCount Old_dCount) (not New_Ret) (>= Old_dCount 0)) (and New_Ret Old_dContainsKeyX (= New_dCount (+ -1 Old_dCount)) (>= New_dCount 0))))

Predicate chosen at root : New_dCount == Old_dCount

rounds: 6

pex time: 650.8895499706268

learn time: 84.70959138870239

Samples: 54

---------------------
PUT_GetContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: (New_dCount == Old_dCount && Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && Old_dCount >= 1) holds because the state of the Dictionary does not change from pre to post. New_Ret != Old_x It holds that the value will either be the same as the key or not equal to the key.

learned postcondition: ((New_dCount <= Old_dCount && Old_dCount <= New_dCount && 1 <= Old_dCount && 0 < Old_dCount && 0 <= Old_dCount && -1 < Old_dCount && -1 <= Old_dCount && 1 <= New_dCount && 0 < New_dCount && 0 <= New_dCount && -1 < New_dCount && -1 <= New_dCount && New_dCount == Old_dCount && Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet) && ((!(New_Ret == Old_x)) || New_ContainsKeyNewRet))

simplified postcondition: ((New_dCount == Old_dCount && Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && (!(New_Ret == Old_x)) && Old_dCount >= 1) || (New_dCount == Old_dCount && Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_ContainsKeyNewRet && Old_dCount >= 1))

CNF simplified: ((New_dCount == Old_dCount && Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && Old_dCount >= 1) && (((!(New_Ret == Old_x))) || (New_ContainsKeyNewRet)))

CNF simplified (smt): (and (and (= New_dCount Old_dCount) Old_dContainsKeyX New_dContainsKeyX New_ContainsValueNewRet (>= Old_dCount 1)) (or (not (= New_Ret Old_x)) New_ContainsKeyNewRet))

Predicate chosen at root : New_Ret != Old_x

rounds: 4

pex time: 475.077609539032

learn time: 72.19585418701172

Samples: 29

---------------------
PUT_SetContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: (New_dContainsValueY && New_dContainsKeyX) holds because the key-value pair will be present in the post state. !(Old_dContainsKeyX) If a key x is not present in the pre state, then the number of elements will increase by one and be at least one. If not, the number of elements won't change and there was at least one element in the pre state.

learned postcondition: (((Old_dCount <= New_dCount && New_dContainsValueY && New_dContainsKeyX && Old_dCount >= 0 && New_dCount >= 1)) && ((Old_dContainsKeyX && New_dCount == Old_dCount && Old_dCount >= 1) || (New_dCount == 1 + Old_dCount && (!(Old_dContainsKeyX)))))

simplified postcondition: ((New_dContainsValueY && New_dContainsKeyX && Old_dContainsKeyX && New_dCount == Old_dCount && Old_dCount >= 1) || (New_dContainsValueY && New_dContainsKeyX && (!(Old_dContainsKeyX)) && New_dCount == 1 + Old_dCount && New_dCount >= 1))

CNF simplified: ((New_dContainsValueY && New_dContainsKeyX) && ((Old_dContainsKeyX && New_dCount == Old_dCount && Old_dCount >= 1) || ((!(Old_dContainsKeyX)) && New_dCount == 1 + Old_dCount && New_dCount >= 1)))

CNF simplified (smt): (and (and New_dContainsValueY New_dContainsKeyX) (or (and Old_dContainsKeyX (= New_dCount Old_dCount) (>= Old_dCount 1)) (and (not Old_dContainsKeyX) (= New_dCount (+ 1 Old_dCount)) (>= New_dCount 1))))

Predicate chosen at root : Not(Old_dContainsKeyX)

rounds: 6

pex time: 613.3234422206879

learn time: 324.9341928958893

Samples: 61

---------------------
PUT_ContainsKeyContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: (New_dCount == Old_dCount) holds because the number of elements does not change between states. !(New_Ret) If a key x is not present, then the number of elements present is at least zero. If not then the number of elements is at least one.

learned postcondition: ((New_dCount <= Old_dCount && Old_dCount <= New_dCount && 0 <= Old_dCount && -1 < Old_dCount && -1 <= Old_dCount && 0 <= New_dCount && -1 < New_dCount && -1 <= New_dCount && New_dCount == Old_dCount) && ((!(New_Ret)) || (New_dCount >= 1 && Old_dCount >= 1)))

simplified postcondition: ((New_dCount == Old_dCount && (!(New_Ret)) && Old_dCount >= 0) || (New_dCount == Old_dCount && Old_dCount >= 1))

CNF simplified: ((New_dCount == Old_dCount) && (((!(New_Ret)) && Old_dCount >= 0) || (Old_dCount >= 1)))

CNF simplified (smt): (and (= New_dCount Old_dCount) (or (and (not New_Ret) (>= Old_dCount 0)) (>= Old_dCount 1)))

Predicate chosen at root : Not(New_Ret)

rounds: 5

pex time: 601.0841920375824

learn time: 38.49869656562805

Samples: 41

---------------------
PUT_ContainsValueContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: (New_dCount == Old_dCount) holds because the number of elements does not change between states. !(New_Ret) If a value x is not present, then the number of elements present is at least zero. If not then the number of elements is at least one.

learned postcondition: ((New_dCount <= Old_dCount && Old_dCount <= New_dCount && 0 <= Old_dCount && -1 < Old_dCount && -1 <= Old_dCount && 0 <= New_dCount && -1 < New_dCount && -1 <= New_dCount && New_dCount == Old_dCount) && ((!(New_Ret)) || (New_dCount >= 1 && Old_dCount >= 1)))

simplified postcondition: ((New_dCount == Old_dCount && (!(New_Ret)) && Old_dCount >= 0) || (New_dCount == Old_dCount && Old_dCount >= 1))

CNF simplified: ((New_dCount == Old_dCount) && (((!(New_Ret)) && Old_dCount >= 0) || (Old_dCount >= 1)))

CNF simplified (smt): (and (= New_dCount Old_dCount) (or (and (not New_Ret) (>= Old_dCount 0)) (>= Old_dCount 1)))

Predicate chosen at root : Not(New_Ret)

rounds: 5

pex time: 312.37073278427124

learn time: 32.291038513183594

Samples: 33

---------------------
PUT_CountContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: ((New_Ret == 0 ) || (New_Ret >= 1)) holds because the number of elements cannot be negative.

learned postcondition: ((0 <= New_Ret && -1 < New_Ret && -1 <= New_Ret) && (New_Ret >= 1 || New_Ret == 0))

simplified postcondition: ((New_Ret == 0 || New_Ret >= 1))

CNF simplified: (((New_Ret == 0 ) || (New_Ret >= 1)))

CNF simplified (smt): (or (= New_Ret 0) (>= New_Ret 1))

Predicate chosen at root : 1 <= New_Ret

rounds: 2

pex time: 95.1102659702301

learn time: 0.3027982711791992

Samples: 6

======================
Average Rounds: 4.7142857142857

Average Pex Time: 481.67094693865

Averagea Learn Time: 104.01810870852
