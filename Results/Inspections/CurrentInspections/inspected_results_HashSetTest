Problem: HashSetTest

---------------------
PUT_AddContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Equivalent








Truly Safe: True

Analysis: (!(New_hsContainsX)) holds because an item x will always be added from the set if not present before add is called, and if present, then it will still be present in the set after add is called. !(Old_hsContainsX) If an item x is not in the set before add is called, then it follows that the set has one more element in it. If an item x is in the set before add is called, then it is true that the state of the set didn't change after this call and the set has at least one elements.

learned postcondition: ((Old_hsCount <= New_hsCount && 0 <= Old_hsCount && -1 < Old_hsCount && -1 <= Old_hsCount && 1 <= New_hsCount && 0 < New_hsCount && 0 <= New_hsCount && -1 < New_hsCount && -1 <= New_hsCount && New_hsContainsX) && ((Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_hsCount >= 1) || (New_Ret && (!(Old_hsContainsX)) && New_hsCount == 1 + Old_hsCount)))

simplified postcondition: ((New_hsContainsX && (!(New_Ret)) && Old_hsContainsX && New_hsCount == Old_hsCount && Old_hsCount >= 1) || (New_hsContainsX && (!(Old_hsContainsX)) && New_Ret && New_hsCount == 1 + Old_hsCount && New_hsCount >= 1))

CNF simplified: ((New_hsContainsX) && (((!(New_Ret)) && Old_hsContainsX && New_hsCount == Old_hsCount && Old_hsCount >= 1) || ((!(Old_hsContainsX)) && New_Ret && New_hsCount == 1 + Old_hsCount && New_hsCount >= 1)))

CNF simplified (smt): (and New_hsContainsX (or (and (not New_Ret) Old_hsContainsX (= New_hsCount Old_hsCount) (>= Old_hsCount 1)) (and (not Old_hsContainsX) New_Ret (= New_hsCount (+ 1 Old_hsCount)) (>= New_hsCount 1))))

Predicate chosen at root : Not(Old_hsContainsX)

rounds: 6

pex time: 745.364716053009

learn time: 83.58687138557434

Samples: 54

---------------------
PUT_RemoveContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Unknown








Truly Safe: True

Analysis: (!(New_hsContainsX)) holds because an item x will always be removed from the set if present before remove is called, and if not present, then there is no way it can be in the set after remove is called. (New_hsCount == Old_hsCount) If the number of elements in the set does not change after remove is called, then is true that the set can be of any non-negative size and the element to remove was not present within the set and the state of the set did not change after this call. If the number of elements in the set does change after remove is called, then it follows that the set has one less elements in it.

learned postcondition: ((New_hsCount <= Old_hsCount && 0 <= Old_hsCount && -1 < Old_hsCount && -1 <= Old_hsCount && 0 <= New_hsCount && -1 < New_hsCount && -1 <= New_hsCount && (!(New_hsContainsX))) && ((New_Ret && Old_hsContainsX && New_hsCount == -1 + Old_hsCount && Old_hsCount >= 1) || ((!(New_Ret)) && New_hsCount == Old_hsCount && (!(Old_hsContainsX)))))

simplified postcondition: (((!(New_hsContainsX)) && New_Ret && Old_hsContainsX && New_hsCount == -1 + Old_hsCount && New_hsCount >= 0) || ((!(New_hsContainsX)) && (!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_hsCount >= 0))

CNF simplified: (((!(New_hsContainsX))) && ((New_Ret && Old_hsContainsX && New_hsCount == -1 + Old_hsCount && New_hsCount >= 0) || ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_hsCount >= 0)))

CNF simplified (smt): (and (not New_hsContainsX) (or (and New_Ret Old_hsContainsX (= New_hsCount (+ -1 Old_hsCount)) (>= New_hsCount 0)) (and (not New_Ret) (not Old_hsContainsX) (= New_hsCount Old_hsCount) (>= Old_hsCount 0))))

Predicate chosen at root : New_hsCount == Old_hsCount

rounds: 5

pex time: 605.3532242774963

learn time: 78.95042514801025

Samples: 47

---------------------
PUT_ContainsContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Unknown








Truly Safe: True

Analysis: (New_hsCount == Old_hsCount) holds because contains does not change the state of the set upon call. !(New_Ret) If the item is not within the set, then it is true that set has any amount of non-zero elements. If the item is within the set, then it is true the set has at least one element.

learned postcondition: ((New_hsCount <= Old_hsCount && Old_hsCount <= New_hsCount && 0 <= Old_hsCount && -1 < Old_hsCount && -1 <= Old_hsCount && 0 <= New_hsCount && -1 < New_hsCount && -1 <= New_hsCount && New_hsCount == Old_hsCount) && ((!(New_Ret)) || (Old_hsCount >= 1 && New_hsCount >= 1)))

simplified postcondition: ((New_hsCount == Old_hsCount && (!(New_Ret)) && Old_hsCount >= 0) || (New_hsCount == Old_hsCount && Old_hsCount >= 1))

CNF simplified: ((New_hsCount == Old_hsCount) && (((!(New_Ret)) && Old_hsCount >= 0) || (Old_hsCount >= 1)))

CNF simplified (smt): (and (= New_hsCount Old_hsCount) (or (and (not New_Ret) (>= Old_hsCount 0)) (>= Old_hsCount 1)))

Predicate chosen at root : Not(New_Ret)

rounds: 5

pex time: 515.2950851917267

learn time: 38.43277859687805

Samples: 40

---------------------
PUT_CountContract
Disjunctive (PexChoose):
Disjunctive (Alternate Semantics):
Disjunctive (Truly):

smt check: Unknown








Truly Safe: True

Analysis: (New_Ret == 0 || New_Ret >= 1) This holds because it's a ground truth that the count will wither be empty or contain some positive amount of elements.

learned postcondition: ((0 <= New_Ret && -1 < New_Ret && -1 <= New_Ret) && (New_Ret >= 1 || New_Ret == 0))

simplified postcondition: (New_Ret == 0 || New_Ret >= 1)

CNF simplified: (((New_Ret == 0) || (New_Ret >= 1)))

CNF simplified (smt): (or (= New_Ret 0) (>= New_Ret 1))

Predicate chosen at root : 1 <= New_Ret

rounds: 2

pex time: 146.4104564189911

learn time: 0.2878119945526123

Samples: 5

======================
Average Rounds: 4.5

Average Pex Time: 503.1058704853058

Average Learn Time: 50.314471781253815
