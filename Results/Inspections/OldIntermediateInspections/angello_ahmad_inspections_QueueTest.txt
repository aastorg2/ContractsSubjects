Problem: QueueTest

---------------------
PUT_EnqueueContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

notes:

This case that we missed because PexChoose loses precision and cannot express ideal splitting condition, s1Count > 0.


======
k == 0

learned postcondition: (New_s1ContainsX && New_s1Count == Old_s1Count + 1 && New_x == Old_x && New_s1Count != Old_s1Count)

simplified postcondition: ((New_s1ContainsX && New_s1Count == 1 + Old_s1Count && New_x == Old_x))

predicate: None

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: pass

pex time: 153.6340868473053

learn time: 5.760830402374268

Samples: 19

======
k == 1

learned postcondition: ((New_s1ContainsX && New_s1Count == Old_s1Count + 1 && New_x == Old_x && New_s1Count != Old_s1Count) && (((New_Top == Old_Top) && Old_s1ContainsX) || (true && (!(Old_s1ContainsX)))))

simplified postcondition: ((New_s1ContainsX && New_s1Count == 1 + Old_s1Count && New_x == Old_x && New_Top == Old_Top) || (New_s1ContainsX && New_s1Count == 1 + Old_s1Count && New_x == Old_x && (!(Old_s1ContainsX))))

predicate: New_x == Old_Top

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: reject

pex time: 290.73624563217163

learn time: 97.61700868606567

Samples: 61

k0 -> k1: False

k1 -> k0: False

======
k == 2

learned postcondition: ((New_s1ContainsX && New_s1Count == Old_s1Count + 1 && New_x == Old_x && New_s1Count != Old_s1Count) && (((New_Top == Old_Top) && Old_s1ContainsX) || (true && (!(Old_s1ContainsX)))))

simplified postcondition: ((New_s1ContainsX && New_s1Count == 1 + Old_s1Count && New_x == Old_x && New_Top == Old_Top) || (New_s1ContainsX && New_s1Count == 1 + Old_s1Count && New_x == Old_x && (!(Old_s1ContainsX))))

predicate: New_x == Old_Top

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: reject

pex time: 291.4214344024658

learn time: 144.89234352111816

Samples: 61

k0 -> k2: False

k1 -> k2: True

---------------------
PUT_DequeueContract

Disjunctive (PexChoose): False
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

Notes: 
The is exist a disjunction that be expressed with alternate Semantics: ((New_s1Count == -1 + Old_s1Count && New_Ret == Old_Top && New_s1ContainsNewRet) || (New_s1Count == -1 + Old_s1Count && (!(New_Ret == New_Top)) && (!(New_s1ContainsNewRet))))
However, take not that pex is more refined for k0 and the alternte semantics learns about New_Ret == Old_Top later

======
k == 0

learned postcondition: (New_s1Count == Old_s1Count - 1 && New_Ret == Old_Top && New_s1Count != Old_s1Count)

simplified postcondition: ((New_s1Count == -1 + Old_s1Count && New_Ret == Old_Top))

predicate: None

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: pass

pex time: 72.93485379219055

learn time: 3.0606391429901123

Samples: 21

======
k == 1

learned postcondition: (New_s1Count == Old_s1Count - 1 && New_Ret == Old_Top && New_s1Count != Old_s1Count)

simplified postcondition: ((New_s1Count == -1 + Old_s1Count && New_Ret == Old_Top))

predicate: None

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: reject

pex time: 133.09365844726562

learn time: 30.45755624771118

Samples: 42

k0 -> k1: True

k1 -> k0: True

======
k == 2

learned postcondition: (New_s1Count == Old_s1Count - 1 && New_Ret == Old_Top && New_s1Count != Old_s1Count)

simplified postcondition: ((New_s1Count == -1 + Old_s1Count && New_Ret == Old_Top))

predicate: None

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: reject

pex time: 134.50424575805664

learn time: 38.67958331108093

Samples: 42

k0 -> k2: True

k1 -> k2: True

---------------------
PUT_PeekContract

Disjunctive (PexChoose): False
Disjunctive (Alternate Semantics): False
Disjunctive (Truly): False

Notes:
In agreement

======
k == 0

learned postcondition: (New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_Top == Old_Top && New_Ret == Old_Top && New_Ret == New_Top)

simplified postcondition: ((New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_Ret == Old_Top && Old_Top == New_Top))

predicate: None

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 50.36547613143921

learn time: 2.9333980083465576

Samples: 10

======
k == 1

learned postcondition: (New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_Top == Old_Top && New_Ret == Old_Top && New_Ret == New_Top)

simplified postcondition: ((New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_Ret == Old_Top && Old_Top == New_Top))

predicate: None

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 49.62835121154785

learn time: 4.705812454223633

Samples: 10

k0 -> k1: True

k1 -> k0: True

======
k == 2

learned postcondition: (New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_Top == Old_Top && New_Ret == Old_Top && New_Ret == New_Top)

simplified postcondition: ((New_s1ContainsNewRet && New_s1Count == Old_s1Count && New_Ret == Old_Top && New_Ret == New_Top))

predicate: None

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 49.01275992393494

learn time: 4.740562677383423

Samples: 10

k0 -> k2: True

k1 -> k2: True

---------------------
PUT_CountContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): False
Disjunctive (Truly): False

notes:

same as stack count where Disjunctive tried to capture conjunctive conject. This case also suffers from expressiveness issues.

======
k == 0

learned postcondition: (New_s1Count == Old_s1Count && New_Ret == Old_s1Count && New_Ret == New_s1Count)

simplified postcondition: ((New_Ret == Old_s1Count && New_Ret == New_s1Count))

predicate: None

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: reject

pex time: 119.86993765830994

learn time: 3.1277084350585938

Samples: 18

======
k == 1

learned postcondition: ((New_s1Count == Old_s1Count && New_Ret == Old_s1Count && New_Ret == New_s1Count) && (((New_Top == Old_Top) && New_ContainsNewRet) || (true && (!(New_ContainsNewRet)))))

simplified postcondition: ((New_Ret == Old_s1Count && Old_s1Count == New_s1Count && (!(New_ContainsNewRet))) || (New_Ret == Old_s1Count && Old_s1Count == New_s1Count && New_Top == Old_Top))

predicate: New_ContainsNewRet

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 164.9998869895935

learn time: 19.809561252593994

Samples: 31

k0 -> k1: False

k1 -> k0: False

======
k == 2

learned postcondition: ((New_s1Count == Old_s1Count && New_Ret == Old_s1Count && New_Ret == New_s1Count) && (((New_Top == Old_Top) && New_ContainsNewRet) || (true && (!(New_ContainsNewRet)))))

simplified postcondition: ((New_Ret == Old_s1Count && Old_s1Count == New_s1Count && (!(New_ContainsNewRet))) || (New_Ret == Old_s1Count && Old_s1Count == New_s1Count && New_Top == Old_Top))

predicate: New_ContainsNewRet

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 172.21360278129578

learn time: 29.86158776283264

Samples: 31

k0 -> k2: False

k1 -> k2: True

---------------------
PUT_ContainsContract

Disjunctive (PexChoose): True
Disjunctive (Alternate Semantics): True
Disjunctive (Truly): True

Notes: Similar to Stack contains. k1 drops New_Top == Old_Top in neg post because the stack could be empty which makes the Old_Top undefined

======
k == 0

learned postcondition: (New_s1Count == Old_s1Count)

simplified postcondition: ((New_s1Count == Old_s1Count))

predicate: None

predicate right: None

predicate left: None

Any: reject

L: reject

SubL: reject

pex time: 49.52610898017883

learn time: 2.103654384613037

Samples: 17

======
k == 1

learned postcondition: ((New_s1Count == Old_s1Count) && (((New_Ret && Old_s1ContainsX && New_Top == Old_Top) && New_s1ContainsX) || (((!(New_Ret)) && (!(Old_s1ContainsX))) && (!(New_s1ContainsX)))))

simplified postcondition: ((New_s1Count == Old_s1Count && New_Ret && Old_s1ContainsX && New_Top == Old_Top && New_s1ContainsX) || (New_s1Count == Old_s1Count && (!(New_Ret)) && (!(Old_s1ContainsX)) && (!(New_s1ContainsX))))

predicate: New_s1ContainsX

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 77.66674470901489

learn time: 22.410549640655518

Samples: 30

k0 -> k1: False

k1 -> k0: False

======
k == 2

learned postcondition: ((New_s1Count == Old_s1Count) && (((New_Ret && Old_s1ContainsX && New_Top == Old_Top) && New_s1ContainsX) || (((!(New_Ret)) && (!(Old_s1ContainsX))) && (!(New_s1ContainsX)))))

simplified postcondition: ((New_s1Count == Old_s1Count && New_Ret && Old_s1ContainsX && New_Top == Old_Top && New_s1ContainsX) || (New_s1Count == Old_s1Count && (!(New_Ret)) && (!(Old_s1ContainsX)) && (!(New_s1ContainsX))))

predicate: New_s1ContainsX

predicate right: None

predicate left: None

Any: pass

L: pass

SubL: pass

pex time: 82.62825798988342

learn time: 38.370367765426636

Samples: 30

k0 -> k2: False

k1 -> k2: True
