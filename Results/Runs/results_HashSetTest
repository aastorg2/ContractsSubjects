Problem: HashSetTest

PUT: PUT_AddContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_hsContainsX && New_x == Old_x && Old_x != New_hsCount && New_x != New_hsCount)

unsimplified post:
(New_hsContainsX && New_x == Old_x && Old_x != New_hsCount && New_x != New_hsCount)

#############
Round: 2

Houdini AlwaysTrue for k=0 : (New_hsContainsX && New_x == Old_x)

unsimplified post:
(New_hsContainsX && New_x == Old_x)

===== Final Result for PUT_AddContract

postcondition k == 0
(New_hsContainsX && New_x == Old_x)
rounds: 3

simplified post k == 0
((New_hsContainsX && New_x == Old_x))
pex time: 395.76312708854675

learn time: 4.695513486862183

Samples: 20

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_hsContainsX && New_x == Old_x && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_hsContainsX

Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && New_x == 0 && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount)

root Left:  for k = 1 : (New_hsCount == Old_hsCount && New_x == 0 && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount)
Houdini AlwaysTrue for k=0 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right:  for k = 1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)
unsimplified post:
((New_hsContainsX && New_x == Old_x && Old_x != New_hsCount && New_x != New_hsCount) && (((New_hsCount == Old_hsCount && New_x == 0 && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount) && Old_hsContainsX) || ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (!(Old_hsContainsX)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_hsContainsX && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_hsContainsX

Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left:  for k = 1 : (New_hsCount == Old_hsCount && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
Houdini AlwaysTrue for k=0 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right:  for k = 1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)
unsimplified post:
((New_hsContainsX && New_x == Old_x) && (((New_hsCount == Old_hsCount && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && Old_hsContainsX) || ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (!(Old_hsContainsX)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_hsContainsX && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_hsContainsX

Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Left:  for k = 1 : (New_hsCount == Old_hsCount && (!(New_Ret)))
Houdini AlwaysTrue for k=0 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right:  for k = 1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)
unsimplified post:
((New_hsContainsX && New_x == Old_x) && (((New_hsCount == Old_hsCount && (!(New_Ret))) && Old_hsContainsX) || ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (!(Old_hsContainsX)))))

===== Final Result for PUT_AddContract

postcondition k == 1
((New_hsContainsX && New_x == Old_x) && (((New_hsCount == Old_hsCount && (!(New_Ret))) && Old_hsContainsX) || ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (!(Old_hsContainsX)))))
rounds: 4

simplified post k == 1
((New_hsContainsX && New_x == Old_x && New_hsCount == Old_hsCount && (!(New_Ret)) && Old_hsContainsX) || (New_hsContainsX && New_x == Old_x && New_Ret && New_hsCount == 1 + Old_hsCount && (!(Old_hsContainsX))))
pex time: 536.7289140224457

learn time: 34.092687368392944

Samples: 28

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_hsContainsX && New_x == Old_x && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && New_x == 0 && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount)

root Left from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_hsCount == Old_hsCount && New_x == 0 && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Right from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == Old_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 1 && New_x == 0 && Old_x == Old_hsCount)

root Right Left:  for k = 1 : (New_hsCount == 1 && New_x == 0 && Old_x == Old_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((New_hsCount == 1 && New_x == 0 && Old_x == Old_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount) && (!(New_x == Old_hsCount)))))
unsimplified post:
((New_hsContainsX && New_x == Old_x && Old_x != New_hsCount && New_x != New_hsCount) && ((((New_hsCount == Old_hsCount && New_x == 0 && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && Old_hsContainsX) || (((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((New_hsCount == 1 &&  New_x == 0 &&  Old_x == Old_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount) && (!(New_x == Old_hsCount))))) && (!(Old_hsContainsX)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_hsContainsX && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_hsCount == Old_hsCount && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Right from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == Old_hsCount

Houdini AlwaysTrue for k=0 : (Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Left:  for k = 1 : (Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount) && (!(New_x == Old_hsCount)))))
unsimplified post:
((New_hsContainsX && New_x == Old_x) && ((((New_hsCount == Old_hsCount && (!(New_Ret)) && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && Old_hsContainsX) || (((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount) && (!(New_x == Old_hsCount))))) && (!(Old_hsContainsX)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_hsContainsX && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Left from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 1 && New_x == 1 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_hsCount == 1 && New_x == 1 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_hsCount == 1 && New_x == 1 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Right from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == Old_hsCount

Houdini AlwaysTrue for k=0 : (Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Left:  for k = 1 : (Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount) && (!(New_x == Old_hsCount)))))
unsimplified post:
((New_hsContainsX && New_x == Old_x) && ((((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_hsCount == 1 &&  New_x == 1 &&  Old_x == Old_hsCount &&  New_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount) && (!(New_x == Old_hsCount))))) && (!(Old_hsContainsX)))))

#############
Round: 4

Houdini AlwaysTrue for k=2 : (New_hsContainsX && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred Not(New_hsContainsX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_hsContainsX): not expressive in with conjunctions
root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)
root implication check-- featureNeg: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: (Old_hsContainsX && (!(New_Ret)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && (!(Old_hsContainsX)) && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Left from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount)

root Right from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Right from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == Old_hsCount

Houdini AlwaysTrue for k=0 : (Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Left:  for k = 1 : (Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount)
root Right:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount) && (!(New_x == Old_hsCount)))))
unsimplified post:
((New_hsContainsX && New_x == Old_x) && ((((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount) && (!(New_x == Old_hsCount))))) && (!(Old_hsContainsX)))))

===== Final Result for PUT_AddContract

postcondition k == 2
((New_hsContainsX && New_x == Old_x) && ((((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_Ret && New_hsCount == Old_hsCount + 1 && New_hsCount != Old_hsCount) && (((Old_x == Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && New_x == Old_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount) && (!(New_x == Old_hsCount))))) && (!(Old_hsContainsX)))))
rounds: 5

simplified post k == 2
((New_hsContainsX && New_x == Old_x && New_hsCount == Old_hsCount && (!(New_Ret)) && Old_hsContainsX) || (New_hsContainsX && New_x == Old_x && New_Ret && New_hsCount == 1 + Old_hsCount && (!(Old_hsContainsX))))
pex time: 653.1923246383667

learn time: 90.37014365196228

Samples: 45

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_RemoveContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_x == Old_x && (!(New_hsContainsX)))

unsimplified post:
(New_x == Old_x && (!(New_hsContainsX)))

===== Final Result for PUT_RemoveContract

postcondition k == 0
(New_x == Old_x && (!(New_hsContainsX)))
rounds: 2

simplified post k == 0
((New_x == Old_x && (!(New_hsContainsX))))
pex time: 259.8228557109833

learn time: 2.000598430633545

Samples: 16

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_x == Old_x && (!(New_hsContainsX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred New_hsContainsX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsContainsX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_hsContainsX

Houdini AlwaysTrue for k=0 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_x == 0 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root Left:  for k = 1 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_x == 0 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Right:  for k = 1 : (New_hsCount == Old_hsCount && (!(New_Ret)))
unsimplified post:
((New_x == Old_x && (!(New_hsContainsX))) && (((New_Ret && New_hsCount == Old_hsCount - 1 && New_x == 0 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount) && Old_hsContainsX) || ((New_hsCount == Old_hsCount && (!(New_Ret))) && (!(Old_hsContainsX)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_x == Old_x && (!(New_hsContainsX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred New_hsContainsX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsContainsX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_hsContainsX

Houdini AlwaysTrue for k=0 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root Left:  for k = 1 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Right:  for k = 1 : (New_hsCount == Old_hsCount && (!(New_Ret)))
unsimplified post:
((New_x == Old_x && (!(New_hsContainsX))) && (((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount) && Old_hsContainsX) || ((New_hsCount == Old_hsCount && (!(New_Ret))) && (!(Old_hsContainsX)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_x == Old_x && (!(New_hsContainsX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred New_hsContainsX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsContainsX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)

root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_hsContainsX

Houdini AlwaysTrue for k=0 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount)

root Left:  for k = 1 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount)
Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Right:  for k = 1 : (New_hsCount == Old_hsCount && (!(New_Ret)))
unsimplified post:
((New_x == Old_x && (!(New_hsContainsX))) && (((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount) && Old_hsContainsX) || ((New_hsCount == Old_hsCount && (!(New_Ret))) && (!(Old_hsContainsX)))))

===== Final Result for PUT_RemoveContract

postcondition k == 1
((New_x == Old_x && (!(New_hsContainsX))) && (((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount) && Old_hsContainsX) || ((New_hsCount == Old_hsCount && (!(New_Ret))) && (!(Old_hsContainsX)))))
rounds: 4

simplified post k == 1
((New_x == Old_x && (!(New_hsContainsX)) && New_Ret && New_hsCount == -1 + Old_hsCount && Old_hsContainsX) || (New_x == Old_x && (!(New_hsContainsX)) && New_hsCount == Old_hsCount && (!(New_Ret)) && (!(Old_hsContainsX))))
pex time: 522.3859205245972

learn time: 30.852478981018066

Samples: 34

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_x == Old_x && (!(New_hsContainsX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred New_hsContainsX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsContainsX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_x == 0 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 0 && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_hsCount == 0 && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount - 1 && New_x == 0 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount) && (((New_hsCount == 0 && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 0 && New_x == 0 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_hsCount == 0 && New_x == 0 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : ((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_hsCount == 0 && New_x == 0 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_x == Old_x && (!(New_hsContainsX))) && ((((New_Ret && New_hsCount == Old_hsCount - 1 && New_x == 0 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount) && (((New_hsCount == 0 &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_hsCount == 0 &&  New_x == 0 &&  Old_x == Old_hsCount &&  New_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(Old_hsContainsX)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_x == Old_x && (!(New_hsContainsX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred New_hsContainsX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsContainsX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 0 && New_x == 0 && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_hsCount == 0 && New_x == 0 && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount) && (((New_hsCount == 0 && New_x == 0 && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : ((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_x == Old_x && (!(New_hsContainsX))) && ((((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount && Old_x != Old_hsCount && New_x != Old_hsCount) && (((New_hsCount == 0 &&  New_x == 0 &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(Old_hsContainsX)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_x == Old_x && (!(New_hsContainsX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root from implication check-- split from pred New_hsContainsX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsContainsX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)

root implication check-- split pred: New_hsCount != Old_hsCount
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)

root implication check-- split pred: New_hsCount == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && New_hsCount == Old_hsCount)
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsCount != Old_hsCount)

root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount == Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: Old_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Left implication check-- split pred: New_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount)

root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == Old_x && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_hsCount == Old_x && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount) && (((New_hsCount == Old_x && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && (!(New_Ret)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : ((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_x == Old_x && (!(New_hsContainsX))) && ((((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount) && (((New_hsCount == Old_x &&  Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(Old_hsContainsX)))))

===== Final Result for PUT_RemoveContract

postcondition k == 2
((New_x == Old_x && (!(New_hsContainsX))) && ((((New_Ret && New_hsCount == Old_hsCount - 1 && New_hsCount != Old_hsCount) && (((New_hsCount == Old_x &&  Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && Old_hsContainsX) || (((New_hsCount == Old_hsCount && (!(New_Ret))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(Old_hsContainsX)))))
rounds: 4

simplified post k == 2
((New_x == Old_x && (!(New_hsContainsX)) && New_hsCount == Old_hsCount && (!(New_Ret)) && (!(Old_hsContainsX))) || (New_x == Old_x && (!(New_hsContainsX)) && New_Ret && New_hsCount == -1 + Old_hsCount && Old_hsContainsX))
pex time: 518.9649395942688

learn time: 60.42358922958374

Samples: 44

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_CountContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)

unsimplified post:
(New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)

===== Final Result for PUT_CountContract

postcondition k == 0
(New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)
rounds: 2

simplified post k == 0
((New_Ret == Old_hsCount && New_Ret == New_hsCount))
pex time: 257.0468940734863

learn time: 1.4032461643218994

Samples: 16

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)

root implication check-- split pred: New_ContainsNewRet
root implication check-- featurePos: (New_ContainsNewRet)
root implication check-- featureNeg: ((!(New_ContainsNewRet)))

root implication check-- split pred: Not(New_ContainsNewRet)
root implication check-- featurePos: ((!(New_ContainsNewRet)))
root implication check-- featureNeg: (New_ContainsNewRet)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_hsCount: not expressive in with conjunctions
Predicate: root for k = 1 : None

unsimplified post:
(New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)

===== Final Result for PUT_CountContract

postcondition k == 1
(New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)
rounds: 2

simplified post k == 1
((New_Ret == Old_hsCount && New_Ret == New_hsCount))
pex time: 252.73772716522217

learn time: 1.8954246044158936

Samples: 16

Not(k0 -> k1)? unsat

Not(k1 -> k0)? unsat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)

root implication check-- split pred: New_ContainsNewRet
root implication check-- featurePos: (New_ContainsNewRet)
root implication check-- featureNeg: ((!(New_ContainsNewRet)))

root implication check-- split pred: Not(New_ContainsNewRet)
root implication check-- featurePos: ((!(New_ContainsNewRet)))
root implication check-- featureNeg: (New_ContainsNewRet)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_hsCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_hsCount: not expressive in with conjunctions
Predicate: root for k = 2 : None

unsimplified post:
(New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)

===== Final Result for PUT_CountContract

postcondition k == 2
(New_hsCount == Old_hsCount && New_Ret == Old_hsCount && New_Ret == New_hsCount)
rounds: 2

simplified post k == 2
((New_Ret == Old_hsCount && New_Ret == New_hsCount))
pex time: 252.87639808654785

learn time: 1.9394981861114502

Samples: 16

Not(k0 -> k2)? unsat

Not(k1 -> k2)? unsat

PUT: PUT_ContainsContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_hsCount == Old_hsCount && New_x == Old_x)

unsimplified post:
(New_hsCount == Old_hsCount && New_x == Old_x)

===== Final Result for PUT_ContainsContract

postcondition k == 0
(New_hsCount == Old_hsCount && New_x == Old_x)
rounds: 2

simplified post k == 0
((New_hsCount == Old_hsCount && New_x == Old_x))
pex time: 285.36495995521545

learn time: 1.6376957893371582

Samples: 10

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : New_hsContainsX

Houdini AlwaysTrue for k=0 : (New_Ret && Old_hsContainsX && New_x == 0 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left:  for k = 1 : (New_Ret && Old_hsContainsX && New_x == 0 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_hsContainsX)))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && (((New_Ret && Old_hsContainsX && New_x == 0 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && New_hsContainsX) || (((!(New_Ret)) && (!(Old_hsContainsX))) && (!(New_hsContainsX)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : New_hsContainsX

Houdini AlwaysTrue for k=0 : (New_Ret && Old_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left:  for k = 1 : (New_Ret && Old_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_hsContainsX)))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && (((New_Ret && Old_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && New_hsContainsX) || (((!(New_Ret)) && (!(Old_hsContainsX))) && (!(New_hsContainsX)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : New_hsContainsX

Houdini AlwaysTrue for k=0 : (New_Ret && Old_hsContainsX)

root Left:  for k = 1 : (New_Ret && Old_hsContainsX)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_hsContainsX)))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && (((New_Ret && Old_hsContainsX) && New_hsContainsX) || (((!(New_Ret)) && (!(Old_hsContainsX))) && (!(New_hsContainsX)))))

===== Final Result for PUT_ContainsContract

postcondition k == 1
((New_hsCount == Old_hsCount && New_x == Old_x) && (((New_Ret && Old_hsContainsX) && New_hsContainsX) || (((!(New_Ret)) && (!(Old_hsContainsX))) && (!(New_hsContainsX)))))
rounds: 4

simplified post k == 1
((New_hsCount == Old_hsCount && New_x == Old_x && New_Ret && Old_hsContainsX && New_hsContainsX) || (New_hsCount == Old_hsCount && New_x == Old_x && (!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX))))
pex time: 516.6635901927948

learn time: 23.849465370178223

Samples: 21

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_hsContainsX && New_x == 0 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_hsContainsX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_hsContainsX): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_Ret && Old_hsContainsX && New_x == 0 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_hsContainsX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_hsContainsX: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 0 && New_x == 0 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_hsCount == 0 && New_x == 0 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (New_hsCount == 1 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (New_hsCount == 1 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_hsCount == 0 && New_x == 0 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((New_hsCount == 1 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && ((((New_Ret && Old_hsContainsX && New_x == 0 && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && New_hsContainsX) || ((((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_hsCount == 0 &&  New_x == 0 &&  Old_x == Old_hsCount &&  New_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((New_hsCount == 1 &&  Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(New_hsContainsX)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_hsContainsX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_hsContainsX): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_hsCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_Ret && Old_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_hsContainsX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_hsContainsX: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && ((((New_Ret && Old_hsContainsX && Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && New_hsContainsX) || ((((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(New_hsContainsX)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_hsContainsX)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_hsContainsX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_hsContainsX): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_hsCount == 1 && New_x == 1 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_hsCount == 1 && New_x == 1 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_Ret && Old_hsContainsX) && (((New_hsCount == 1 && New_x == 1 && Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_hsContainsX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_hsContainsX: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && ((((New_Ret && Old_hsContainsX) && (((New_hsCount == 1 &&  New_x == 1 &&  Old_x == Old_hsCount &&  New_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && New_hsContainsX) || ((((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(New_hsContainsX)))))

#############
Round: 4

Houdini AlwaysTrue for k=2 : (New_hsCount == Old_hsCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Old_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: New_hsContainsX
root implication check-- featurePos: (New_Ret && Old_hsContainsX && New_hsContainsX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root implication check-- split pred: Not(Old_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root implication check-- split pred: Not(New_hsContainsX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)))
root implication check-- featureNeg: (New_Ret && Old_hsContainsX && New_hsContainsX)

root from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != Old_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == Old_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: Old_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: Old_x == New_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root implication check-- split pred: New_x != New_hsCount
root implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root implication check-- split pred: New_x == New_hsCount
root implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_hsContainsX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_hsContainsX)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_hsContainsX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_hsContainsX): not expressive in with conjunctions
root Left from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != Old_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == Old_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: Old_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: Old_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left implication check-- split pred: New_x != New_hsCount
root Left implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Left implication check-- split pred: New_x == New_hsCount
root Left implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Left implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Left Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Left Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Left:  for k = 2 : ((New_Ret && Old_hsContainsX) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_hsContainsX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_hsContainsX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_hsContainsX: not expressive in with conjunctions
root Right from implication check-- split from pred New_hsCount != Old_hsCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_hsCount != Old_hsCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != Old_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == Old_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: Old_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: Old_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right implication check-- split pred: New_x != New_hsCount
root Right implication check-- featurePos: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right implication check-- featureNeg: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)

root Right implication check-- split pred: New_x == New_hsCount
root Right implication check-- featurePos: (Old_x == Old_hsCount && New_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount)
root Right implication check-- featureNeg: (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_hsCount

Houdini AlwaysTrue for k=0 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)

root Right Left:  for k = 1 : (New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)

root Right Right:  for k = 1 : (Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount && Old_x == Old_hsCount && Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount && New_x != Old_hsCount && Old_x != New_hsCount && New_x != New_hsCount) && (!(New_x == New_hsCount)))))
unsimplified post:
((New_hsCount == Old_hsCount && New_x == Old_x) && ((((New_Ret && Old_hsContainsX) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && New_hsContainsX) || ((((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(New_hsContainsX)))))

===== Final Result for PUT_ContainsContract

postcondition k == 2
((New_hsCount == Old_hsCount && New_x == Old_x) && ((((New_Ret && Old_hsContainsX) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && New_hsContainsX) || ((((!(New_Ret)) && (!(Old_hsContainsX))) && (((New_x == Old_hsCount &&  Old_x == Old_hsCount &&  Old_x == New_hsCount) && New_x == New_hsCount) || ((Old_x != Old_hsCount &&  New_x != Old_hsCount &&  Old_x != New_hsCount &&  New_x != New_hsCount) && (!(New_x == New_hsCount))))) && (!(New_hsContainsX)))))
rounds: 5

simplified post k == 2
((New_hsCount == Old_hsCount && New_x == Old_x && New_Ret && Old_hsContainsX && New_hsContainsX) || ((!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && Old_x == Old_hsCount && Old_x == New_hsCount && New_x == New_hsCount) || (New_hsCount == Old_hsCount && New_x == Old_x && (!(New_Ret)) && (!(Old_hsContainsX)) && (!(New_hsContainsX)) && (!(New_x == New_hsCount))))
pex time: 649.2319815158844

learn time: 76.42956018447876

Samples: 37

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

