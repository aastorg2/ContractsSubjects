Problem: DictionaryTest

Problem: DictionaryTest

PUT: PUT_AddContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

unsimplified post:
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

#############
Round: 2

Houdini AlwaysTrue for k=0 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

unsimplified post:
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

===== Final Result for PUT_AddContract

postcondition k == 0
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
rounds: 3

simplified post k == 0
((New_dContainsKeyX && New_dContainsValueY && New_dCount == 1 + Old_dCount && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX))))
pex time: 372.9709949493408

learn time: 6.680593013763428

Samples: 27

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && (((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Left:  for k = 1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (((Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY)))))

#############
Round: 4

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != New_dCount && New_x != New_dCount)

root Left:  for k = 1 : (Old_x != New_dCount && New_x != New_dCount)
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (((Old_x != New_dCount && New_x != New_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY)))))

#############
Round: 5

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_y == Old_dCount

Houdini AlwaysTrue for k=0 : (Old_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (Old_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount)

root Right:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (((Old_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && New_y == Old_dCount) || ((Old_y != Old_dCount && New_y != Old_dCount) && (!(New_y == Old_dCount)))))

#############
Round: 6

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_x == Old_dCount

Houdini AlwaysTrue for k=0 : (Old_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (Old_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount)

root Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (((Old_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && New_x == Old_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount) && (!(New_x == Old_dCount)))))

#############
Round: 7

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : None

unsimplified post:
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

===== Final Result for PUT_AddContract

postcondition k == 1
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
rounds: 8

simplified post k == 1
((New_dContainsKeyX && New_dContainsValueY && New_dCount == 1 + Old_dCount && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX))))
pex time: 994.8731248378754

learn time: 153.39497184753418

Samples: 84

Not(k0 -> k1)? unsat

Not(k1 -> k0)? unsat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsValueY

Houdini AlwaysTrue for k=1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && (((New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=1 : true

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_x == 0 && New_y == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x)

root Right Left:  for k = 1 : (New_dCount == 1 && New_x == 0 && New_y == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right:  for k = 2 : (true && (((New_dCount == 1 && New_x == 0 && New_y == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && ((((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && (((New_x == 0 &&  New_y == 0 &&  Old_y == Old_x &&  New_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsValueY) || ((true && (((New_dCount == 1 &&  New_x == 0 &&  New_y == 0 &&  Old_x == Old_dCount &&  New_x == Old_dCount &&  Old_y == Old_dCount &&  New_y == Old_dCount &&  Old_y == Old_x &&  New_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(Old_dContainsValueY)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_y == New_x

Houdini AlwaysTrue for k=1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Left implication check-- split pred: Old_dContainsValueY
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)))

root Left implication check-- split pred: Not(Old_dContainsValueY)
root Left implication check-- featurePos: ((!(Old_dContainsValueY)))
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y != New_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != New_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left Left:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == 1)

root Left Right:  for k = 1 : (New_dCount == 1)
root Left:  for k = 2 : ((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && (((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsValueY) || ((New_dCount == 1) && (!(Old_dContainsValueY)))))
Houdini AlwaysTrue for k=1 : (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_dContainsValueY
root Right implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)))

root Right implication check-- split pred: Not(Old_dContainsValueY)
root Right implication check-- featurePos: ((!(Old_dContainsValueY)))
root Right implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_y == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y == Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == New_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == New_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right Left:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right Right:  for k = 1 : true
root Right:  for k = 2 : ((Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && ((((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && (((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && Old_dContainsValueY) || ((New_dCount == 1) && (!(Old_dContainsValueY))))) && New_y == New_x) || (((Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY))))) && (!(New_y == New_x)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsValueY

Houdini AlwaysTrue for k=1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && (((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=1 : true

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Right Left:  for k = 1 : (New_dCount == 1 && New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right:  for k = 2 : (true && (((New_dCount == 1 && New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && ((((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_x != New_dCount &&  New_x != New_dCount &&  Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsValueY) || ((true && (((New_dCount == 1 &&  New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(Old_dContainsValueY)))))

#############
Round: 4

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_x == Old_dCount

Houdini AlwaysTrue for k=1 : (Old_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_x == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (New_dCount == 1 && New_x == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((Old_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && (((New_y == Old_dCount && Old_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x) && New_y == New_x) || ((New_dCount == 1 && New_x == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
Houdini AlwaysTrue for k=1 : (Old_x != Old_dCount && New_x != Old_dCount)

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && Old_y == New_x)

root Right Left:  for k = 1 : (New_y == Old_x && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right:  for k = 2 : ((Old_x != Old_dCount && New_x != Old_dCount) && (((New_y == Old_x && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && ((((Old_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == Old_x &&  New_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((New_dCount == 1 &&  New_x == 0 &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && New_x == Old_dCount) || (((Old_x != Old_dCount && New_x != Old_dCount) && (((New_y == Old_x &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(New_x == Old_dCount)))))

#############
Round: 5

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : None

unsimplified post:
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

===== Final Result for PUT_AddContract

postcondition k == 2
(New_dContainsKeyX && New_dContainsValueY && New_dCount == Old_dCount + 1 && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
rounds: 6

simplified post k == 2
((New_dContainsKeyX && New_dContainsValueY && New_dCount == 1 + Old_dCount && New_x == Old_x && New_y == Old_y && (!(Old_dContainsKeyX))))
pex time: 745.9411079883575

learn time: 157.8335897922516

Samples: 73

Not(k0 -> k2)? unsat

Not(k1 -> k2)? unsat

PUT: PUT_RemoveContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_x == Old_x && (!(New_dContainsKeyX)))

unsimplified post:
(New_x == Old_x && (!(New_dContainsKeyX)))

===== Final Result for PUT_RemoveContract

postcondition k == 0
(New_x == Old_x && (!(New_dContainsKeyX)))
rounds: 2

simplified post k == 0
((New_x == Old_x && (!(New_dContainsKeyX))))
pex time: 253.3647096157074

learn time: 1.6206657886505127

Samples: 16

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_x == Old_x && (!(New_dContainsKeyX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root from implication check-- split from pred New_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_Ret && New_dCount == Old_dCount - 1 && New_x == 0 && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root Left:  for k = 1 : (New_Ret && New_dCount == Old_dCount - 1 && New_x == 0 && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && (!(New_Ret)))

root Right:  for k = 1 : (New_dCount == Old_dCount && (!(New_Ret)))
unsimplified post:
((New_x == Old_x && (!(New_dContainsKeyX))) && (((New_Ret && New_dCount == Old_dCount - 1 && New_x == 0 && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount && (!(New_Ret))) && (!(Old_dContainsKeyX)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_x == Old_x && (!(New_dContainsKeyX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root from implication check-- split from pred New_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount)

root Left:  for k = 1 : (New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && (!(New_Ret)))

root Right:  for k = 1 : (New_dCount == Old_dCount && (!(New_Ret)))
unsimplified post:
((New_x == Old_x && (!(New_dContainsKeyX))) && (((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount && (!(New_Ret))) && (!(Old_dContainsKeyX)))))

===== Final Result for PUT_RemoveContract

postcondition k == 1
((New_x == Old_x && (!(New_dContainsKeyX))) && (((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount && (!(New_Ret))) && (!(Old_dContainsKeyX)))))
rounds: 3

simplified post k == 1
((New_x == Old_x && (!(New_dContainsKeyX)) && New_dCount == Old_dCount && (!(New_Ret)) && (!(Old_dContainsKeyX))) || (New_x == Old_x && (!(New_dContainsKeyX)) && New_Ret && New_dCount == -1 + Old_dCount && Old_dContainsKeyX))
pex time: 389.66824293136597

learn time: 14.252562284469604

Samples: 25

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_x == Old_x && (!(New_dContainsKeyX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root from implication check-- split from pred New_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && New_dCount == Old_dCount - 1 && New_x == 0 && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 0 && Old_x == New_dCount)

root Left Left:  for k = 1 : (New_dCount == 0 && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != New_dCount && New_x != New_dCount)

root Left Right:  for k = 1 : (Old_x != New_dCount && New_x != New_dCount)
root Left:  for k = 2 : ((New_Ret && New_dCount == Old_dCount - 1 && New_x == 0 && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount) && (((New_dCount == 0 && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && (!(New_Ret)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 0 && New_x == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_dCount == 0 && New_x == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : ((New_dCount == Old_dCount && (!(New_Ret))) && (((New_dCount == 0 && New_x == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_x == Old_x && (!(New_dContainsKeyX))) && ((((New_Ret && New_dCount == Old_dCount - 1 && New_x == 0 && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount) && (((New_dCount == 0 &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount && (!(New_Ret))) && (((New_dCount == 0 &&  New_x == 0 &&  Old_x == Old_dCount &&  New_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(Old_dContainsKeyX)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_x == Old_x && (!(New_dContainsKeyX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root from implication check-- split from pred New_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 0 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount)

root Left Left:  for k = 1 : (New_dCount == 0 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != New_dCount && New_x != New_dCount)

root Left Right:  for k = 1 : (Old_x != New_dCount && New_x != New_dCount)
root Left:  for k = 2 : ((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && (((New_dCount == 0 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && (!(New_Ret)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : ((New_dCount == Old_dCount && (!(New_Ret))) && (((New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_x == Old_x && (!(New_dContainsKeyX))) && ((((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && (((New_dCount == 0 &&  New_x == 0 &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount && (!(New_Ret))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(Old_dContainsKeyX)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_x == Old_x && (!(New_dContainsKeyX)))

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root from implication check-- split from pred New_dContainsKeyX: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dContainsKeyX: not expressive in with conjunctions
root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && New_dCount == Old_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount)

root Left Left:  for k = 1 : (New_dCount == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != New_dCount && New_x != New_dCount)

root Left Right:  for k = 1 : (Old_x != New_dCount && New_x != New_dCount)
root Left:  for k = 2 : ((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && (((New_dCount == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && (!(New_Ret)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : ((New_dCount == Old_dCount && (!(New_Ret))) && (((New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_x == Old_x && (!(New_dContainsKeyX))) && ((((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && (((New_dCount == Old_x &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount && (!(New_Ret))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(Old_dContainsKeyX)))))

===== Final Result for PUT_RemoveContract

postcondition k == 2
((New_x == Old_x && (!(New_dContainsKeyX))) && ((((New_Ret && New_dCount == Old_dCount - 1 && New_dCount != Old_dCount) && (((New_dCount == Old_x &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount && (!(New_Ret))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(Old_dContainsKeyX)))))
rounds: 4

simplified post k == 2
((New_x == Old_x && (!(New_dContainsKeyX)) && New_dCount == Old_dCount && (!(New_Ret)) && (!(Old_dContainsKeyX))) || (New_x == Old_x && (!(New_dContainsKeyX)) && New_Ret && New_dCount == -1 + Old_dCount && Old_dContainsKeyX))
pex time: 506.8862409591675

learn time: 51.735727071762085

Samples: 41

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_GetContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

unsimplified post:
(Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

#############
Round: 2

Houdini AlwaysTrue for k=0 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)

unsimplified post:
(Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)

===== Final Result for PUT_GetContract

postcondition k == 0
(Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)
rounds: 3

simplified post k == 0
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x))
pex time: 380.9152817726135

learn time: 5.634929656982422

Samples: 21

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && New_Ret != Old_x && New_Ret != New_x)

root from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root from implication check-- split from pred Not(New_ContainsValueNewRet): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_ContainsValueNewRet): not expressive in with conjunctions
root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret == Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: New_Ret != Old_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == Old_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

root implication check-- split pred: New_Ret != New_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == New_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

Predicate: root for k = 1 : New_Ret == New_x

Houdini AlwaysTrue for k=0 : (New_ContainsKeyNewRet && New_x == 0 && New_Ret == 0 && New_Ret == Old_x)

root Left:  for k = 1 : (New_ContainsKeyNewRet && New_x == 0 && New_Ret == 0 && New_Ret == Old_x)
Houdini AlwaysTrue for k=0 : (New_Ret != Old_x && New_Ret != New_x)

root Right:  for k = 1 : (New_Ret != Old_x && New_Ret != New_x)
unsimplified post:
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount) && (((New_ContainsKeyNewRet && New_x == 0 && New_Ret == 0 && New_Ret == Old_x) && New_Ret == New_x) || ((New_Ret != Old_x && New_Ret != New_x) && (!(New_Ret == New_x)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)

root from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root from implication check-- split from pred Not(New_ContainsValueNewRet): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_ContainsValueNewRet): not expressive in with conjunctions
root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == Old_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == New_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: New_Ret != Old_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == Old_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)

root implication check-- split pred: New_Ret != New_x
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == New_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)

Predicate: root for k = 1 : New_Ret == New_x

Houdini AlwaysTrue for k=0 : (New_ContainsKeyNewRet && New_Ret == Old_x)

root Left:  for k = 1 : (New_ContainsKeyNewRet && New_Ret == Old_x)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)

root Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)
unsimplified post:
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x) && (((New_ContainsKeyNewRet && New_Ret == Old_x) && New_Ret == New_x) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x) && (!(New_Ret == New_x)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)

root from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root from implication check-- split from pred Not(New_ContainsValueNewRet): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_ContainsValueNewRet): not expressive in with conjunctions
root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != Old_dCount
root implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == Old_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != New_dCount
root implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == New_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: New_Ret != Old_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == Old_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

root implication check-- split pred: New_Ret != New_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == New_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

Predicate: root for k = 1 : New_Ret == New_x

Houdini AlwaysTrue for k=0 : (New_ContainsKeyNewRet && New_Ret == Old_x)

root Left:  for k = 1 : (New_ContainsKeyNewRet && New_Ret == Old_x)
Houdini AlwaysTrue for k=0 : (New_Ret != Old_x && New_Ret != New_x)

root Right:  for k = 1 : (New_Ret != Old_x && New_Ret != New_x)
unsimplified post:
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x) && (((New_ContainsKeyNewRet && New_Ret == Old_x) && New_Ret == New_x) || ((New_Ret != Old_x && New_Ret != New_x) && (!(New_Ret == New_x)))))

===== Final Result for PUT_GetContract

postcondition k == 1
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x) && (((New_ContainsKeyNewRet && New_Ret == Old_x) && New_Ret == New_x) || ((New_Ret != Old_x && New_Ret != New_x) && (!(New_Ret == New_x)))))
rounds: 4

simplified post k == 1
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && New_ContainsKeyNewRet) || (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && (!(New_Ret == New_x))))
pex time: 518.1495442390442

learn time: 34.25933909416199

Samples: 27

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && New_Ret != Old_x && New_Ret != New_x)

root from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root from implication check-- split from pred Not(New_ContainsValueNewRet): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_ContainsValueNewRet): not expressive in with conjunctions
root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret == Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret == Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: New_Ret != Old_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == Old_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

root implication check-- split pred: New_Ret != New_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == New_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

Predicate: root for k = 2 : New_Ret == New_x

Houdini AlwaysTrue for k=1 : (New_ContainsKeyNewRet && New_x == 0 && New_Ret == 0 && New_Ret == Old_x)

root Left from implication check-- split from pred Not(New_ContainsKeyNewRet): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_ContainsKeyNewRet): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != New_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_Ret == New_dCount

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_ContainsKeyNewRet && New_x == 0 && New_Ret == 0 && New_Ret == Old_x) && ((false && New_Ret == New_dCount) || (true && (!(New_Ret == New_dCount)))))
Houdini AlwaysTrue for k=1 : (New_Ret != Old_x && New_Ret != New_x)

root Right implication check-- split pred: New_ContainsKeyNewRet
root Right implication check-- featurePos: (New_ContainsKeyNewRet)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root Right implication check-- split pred: Not(New_ContainsKeyNewRet)
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root Right implication check-- featureNeg: (New_ContainsKeyNewRet)

root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret == Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Right Left:  for k = 1 : false
root Right Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right Right:  for k = 1 : true
root Right:  for k = 2 : ((New_Ret != Old_x && New_Ret != New_x) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
unsimplified post:
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount) && ((((New_ContainsKeyNewRet && New_x == 0 && New_Ret == 0 && New_Ret == Old_x) && ((false && New_Ret == New_dCount) || (true && (!(New_Ret == New_dCount))))) && New_Ret == New_x) || (((New_Ret != Old_x && New_Ret != New_x) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && (!(New_Ret == New_x)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)

root from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root from implication check-- split from pred Not(New_ContainsValueNewRet): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_ContainsValueNewRet): not expressive in with conjunctions
root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != Old_dCount
root implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == Old_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != New_dCount
root implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == New_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: New_Ret != Old_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == Old_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

root implication check-- split pred: New_Ret != New_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == New_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

Predicate: root for k = 2 : New_Ret == New_x

Houdini AlwaysTrue for k=1 : (New_ContainsKeyNewRet && New_Ret == Old_x)

root Left from implication check-- split from pred Not(New_ContainsKeyNewRet): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_ContainsKeyNewRet): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_Ret != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_Ret == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_Ret != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_Ret == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != New_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_Ret == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_x == 1 && New_Ret == 1 && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left Left:  for k = 1 : (New_dCount == 1 && New_x == 1 && New_Ret == 1 && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left:  for k = 2 : ((New_ContainsKeyNewRet && New_Ret == Old_x) && (((New_dCount == 1 && New_x == 1 && New_Ret == 1 && Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount) && New_Ret == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount) && (!(New_Ret == New_dCount)))))
Houdini AlwaysTrue for k=1 : (New_Ret != Old_x && New_Ret != New_x)

root Right implication check-- split pred: New_ContainsKeyNewRet
root Right implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret != Old_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Not(New_ContainsKeyNewRet)
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret != Old_dCount && New_Ret != New_dCount)

root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_Ret != Old_dCount
root Right implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)

root Right implication check-- split pred: New_Ret == Old_dCount
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)
root Right implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (New_ContainsKeyNewRet && Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_Ret != New_dCount
root Right implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)

root Right implication check-- split pred: New_Ret == New_dCount
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)
root Right implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret == Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_ContainsKeyNewRet

Houdini AlwaysTrue for k=0 : (New_Ret != Old_dCount && New_Ret != New_dCount)

root Right Left:  for k = 1 : (New_Ret != Old_dCount && New_Ret != New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : ((New_Ret != Old_x && New_Ret != New_x) && (((New_Ret != Old_dCount && New_Ret != New_dCount) && New_ContainsKeyNewRet) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_ContainsKeyNewRet)))))
unsimplified post:
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x) && ((((New_ContainsKeyNewRet && New_Ret == Old_x) && (((New_dCount == 1 &&  New_x == 1 &&  New_Ret == 1 &&  Old_x == Old_dCount &&  New_x == Old_dCount &&  New_Ret == Old_dCount &&  Old_x == New_dCount &&  New_x == New_dCount) && New_Ret == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  New_Ret != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  New_Ret != New_dCount) && (!(New_Ret == New_dCount))))) && New_Ret == New_x) || (((New_Ret != Old_x && New_Ret != New_x) && (((New_Ret != Old_dCount &&  New_Ret != New_dCount) && New_ContainsKeyNewRet) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_ContainsKeyNewRet))))) && (!(New_Ret == New_x)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)) && New_Ret != Old_x && New_Ret != New_x)

root from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)) && New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root from implication check-- split from pred Not(New_ContainsValueNewRet): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_ContainsValueNewRet): not expressive in with conjunctions
root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != Old_dCount
root implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == Old_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_Ret != New_dCount
root implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root implication check-- featureNeg: (New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_Ret == New_dCount
root implication check-- featurePos: (New_Ret == Old_dCount && New_Ret == New_dCount)
root implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: New_Ret != Old_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == Old_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

root implication check-- split pred: New_Ret != New_x
root implication check-- featurePos: (New_Ret != Old_x && New_Ret != New_x)
root implication check-- featureNeg: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)

root implication check-- split pred: New_Ret == New_x
root implication check-- featurePos: (New_ContainsKeyNewRet && New_Ret == Old_x && New_Ret == New_x)
root implication check-- featureNeg: (New_Ret != Old_x && New_Ret != New_x)

Predicate: root for k = 2 : New_Ret == New_x

Houdini AlwaysTrue for k=1 : (New_ContainsKeyNewRet && New_Ret == Old_x)

root Left from implication check-- split from pred Not(New_ContainsKeyNewRet): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_ContainsKeyNewRet): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_Ret != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_Ret == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left implication check-- split pred: New_Ret != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)

root Left implication check-- split pred: New_Ret == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret == Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != New_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_Ret == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && New_Ret == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left Left:  for k = 1 : (New_x == Old_dCount && New_Ret == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)

root Left Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount)
root Left:  for k = 2 : ((New_ContainsKeyNewRet && New_Ret == Old_x) && (((New_x == Old_dCount && New_Ret == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount) && New_Ret == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && New_Ret != Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret != New_dCount) && (!(New_Ret == New_dCount)))))
Houdini AlwaysTrue for k=1 : (New_Ret != Old_x && New_Ret != New_x)

root Right implication check-- split pred: New_ContainsKeyNewRet
root Right implication check-- featurePos: (New_ContainsKeyNewRet)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root Right implication check-- split pred: Not(New_ContainsKeyNewRet)
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root Right implication check-- featureNeg: (New_ContainsKeyNewRet)

root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_Ret != Old_dCount
root Right implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)

root Right implication check-- split pred: New_Ret == Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)
root Right implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && New_Ret != Old_dCount && Old_x == New_dCount && New_x == New_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_Ret != New_dCount
root Right implication check-- featurePos: (New_Ret != Old_dCount && New_Ret != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)

root Right implication check-- split pred: New_Ret == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && New_Ret == Old_dCount && Old_x != New_dCount && New_x != New_dCount && New_Ret == New_dCount)
root Right implication check-- featureNeg: (New_Ret != Old_dCount && New_Ret != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret == Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_Ret == New_dCount

Houdini AlwaysTrue for k=0 : (New_Ret == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Left:  for k = 1 : (New_Ret == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
Houdini AlwaysTrue for k=0 : (New_Ret != Old_dCount && New_Ret != New_dCount)

root Right Right:  for k = 1 : (New_Ret != Old_dCount && New_Ret != New_dCount)
root Right:  for k = 2 : ((New_Ret != Old_x && New_Ret != New_x) && (((New_Ret == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && New_Ret == New_dCount) || ((New_Ret != Old_dCount && New_Ret != New_dCount) && (!(New_Ret == New_dCount)))))
unsimplified post:
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x) && ((((New_ContainsKeyNewRet && New_Ret == Old_x) && (((New_x == Old_dCount &&  New_Ret == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount &&  New_x == New_dCount) && New_Ret == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  New_Ret != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  New_Ret != New_dCount) && (!(New_Ret == New_dCount))))) && New_Ret == New_x) || (((New_Ret != Old_x && New_Ret != New_x) && (((New_Ret == Old_dCount &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && New_Ret == New_dCount) || ((New_Ret != Old_dCount &&  New_Ret != New_dCount) && (!(New_Ret == New_dCount))))) && (!(New_Ret == New_x)))))

===== Final Result for PUT_GetContract

postcondition k == 2
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x) && ((((New_ContainsKeyNewRet && New_Ret == Old_x) && (((New_x == Old_dCount &&  New_Ret == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount &&  New_x == New_dCount) && New_Ret == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  New_Ret != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  New_Ret != New_dCount) && (!(New_Ret == New_dCount))))) && New_Ret == New_x) || (((New_Ret != Old_x && New_Ret != New_x) && (((New_Ret == Old_dCount &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && New_Ret == New_dCount) || ((New_Ret != Old_dCount &&  New_Ret != New_dCount) && (!(New_Ret == New_dCount))))) && (!(New_Ret == New_x)))))
rounds: 4

simplified post k == 2
((Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && New_ContainsKeyNewRet) || (Old_dContainsKeyX && New_dContainsKeyX && New_ContainsValueNewRet && New_dCount == Old_dCount && New_x == Old_x && (!(New_Ret == New_x))))
pex time: 508.8864514827728

learn time: 74.7110345363617

Samples: 36

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_SetContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

unsimplified post:
(New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

#############
Round: 2

Houdini AlwaysTrue for k=0 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

unsimplified post:
(New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

===== Final Result for PUT_SetContract

postcondition k == 0
(New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)
rounds: 3

simplified post k == 0
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y))
pex time: 399.42787981033325

learn time: 8.879139184951782

Samples: 29

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x)

root Left:  for k = 1 : (New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right:  for k = 1 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && (((New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x) && New_y == New_x) || ((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)

root Left:  for k = 1 : (New_y == Old_x && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((New_y == Old_x && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (New_y == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (New_y == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right:  for k = 1 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((New_y == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsValueY) || ((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (!(Old_dContainsValueY)))))

#############
Round: 4

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right:  for k = 1 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsValueY) || ((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (!(Old_dContainsValueY)))))

#############
Round: 5

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY)))))

#############
Round: 6

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount)

root Left:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount)
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((Old_y != Old_dCount && New_y != Old_dCount) && Old_dContainsValueY) || (true && (!(Old_dContainsValueY)))))

#############
Round: 7

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Right:  for k = 1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (!(Old_dContainsKeyX)))))

#############
Round: 8

Houdini AlwaysTrue for k=1 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : Old_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount)

root Left:  for k = 1 : (New_dCount == Old_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Right:  for k = 1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((New_dCount == Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (!(Old_dContainsKeyX)))))

===== Final Result for PUT_SetContract

postcondition k == 1
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && (((New_dCount == Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (!(Old_dContainsKeyX)))))
rounds: 9

simplified post k == 1
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && New_dCount == Old_dCount && Old_dContainsKeyX) || (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && New_dCount == 1 + Old_dCount && (!(Old_dContainsKeyX))))
pex time: 1157.0244348049164

learn time: 388.9076261520386

Samples: 118

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_y == New_x

Houdini AlwaysTrue for k=1 : (New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x)

root Left implication check-- split pred: Old_dContainsKeyX
root Left implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Left implication check-- split pred: Old_dContainsValueY
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: Not(Old_dContainsKeyX)
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: Not(Old_dContainsValueY)
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_dCount != Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_dCount == Old_dCount
root Left implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y != New_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != New_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : Old_dContainsKeyX

Houdini AlwaysTrue for k=0 : (Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left Left:  for k = 1 : (Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Left Right:  for k = 1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)
root Left:  for k = 2 : ((New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x) && (((Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (!(Old_dContainsKeyX)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root Right implication check-- split pred: Old_dContainsValueY
root Right implication check-- featurePos: (Old_dContainsValueY)
root Right implication check-- featureNeg: ((!(Old_dContainsValueY)))

root Right implication check-- split pred: Not(Old_dContainsValueY)
root Right implication check-- featurePos: ((!(Old_dContainsValueY)))
root Right implication check-- featureNeg: (Old_dContainsValueY)

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_y == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y == Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_y == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y == Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == New_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == New_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y != Old_y

called learn3 with 0 feature vectors
root Right Left:  for k = 1 : false
root Right Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right Right:  for k = 1 : true
root Right:  for k = 2 : ((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && ((false && New_y != Old_y) || (true && (!(New_y != Old_y)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && ((((New_x == 0 && New_y == 0 && Old_y == Old_x && New_y == Old_x && Old_y == New_x) && (((Old_dContainsValueY &&  New_dCount == Old_dCount &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 &&  New_dCount != Old_dCount) && (!(Old_dContainsKeyX))))) && New_y == New_x) || (((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && ((false && New_y != Old_y) || (true && (!(New_y != Old_y))))) && (!(New_y == New_x)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_y == New_x

Houdini AlwaysTrue for k=1 : (New_y == Old_x && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)

root Left implication check-- split pred: Old_dContainsKeyX
root Left implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Left implication check-- split pred: Old_dContainsValueY
root Left implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsValueY)))

root Left implication check-- split pred: Not(Old_dContainsKeyX)
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: Not(Old_dContainsValueY)
root Left implication check-- featurePos: ((!(Old_dContainsValueY)))
root Left implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_dCount != Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_dCount == Old_dCount
root Left implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y == Old_dCount && New_y == Old_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_x: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y != New_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != New_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != New_x: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : Old_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && New_x == 0 && New_y == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)

root Left Left:  for k = 1 : (New_dCount == Old_dCount && New_x == 0 && New_y == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Left Right:  for k = 1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)
root Left:  for k = 2 : ((New_y == Old_x && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x) && (((New_dCount == Old_dCount && New_x == 0 && New_y == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (!(Old_dContainsKeyX)))))
Houdini AlwaysTrue for k=1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_dContainsKeyX
root Right implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right implication check-- split pred: Old_dContainsValueY
root Right implication check-- featurePos: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)

root Right implication check-- split pred: Not(Old_dContainsKeyX)
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Right implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Not(Old_dContainsValueY)
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount)
root Right implication check-- featureNeg: (Old_dContainsValueY && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_dCount != Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Right implication check-- featureNeg: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_dCount == Old_dCount
root Right implication check-- featurePos: (Old_dContainsKeyX && Old_dContainsValueY && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_y == Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y == Old_x: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y == New_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y == New_x: not expressive in with conjunctions
root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : Old_dContainsValueY

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 - Old_y && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right Left:  for k = 1 : (New_dCount == Old_dCount + 1 - Old_y && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right Right:  for k = 1 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Right:  for k = 2 : ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (((New_dCount == Old_dCount + 1 - Old_y && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount) && Old_dContainsValueY) || ((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount) && (!(Old_dContainsValueY)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && ((((New_y == Old_x && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x) && (((New_dCount == Old_dCount &&  New_x == 0 &&  New_y == 0 &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount) && Old_dContainsKeyX) || ((New_dCount == Old_dCount + 1 &&  New_dCount != Old_dCount) && (!(Old_dContainsKeyX))))) && New_y == New_x) || (((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (((New_dCount == Old_dCount + 1 - Old_y &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && Old_dContainsValueY) || ((New_dCount == Old_dCount + 1 &&  (!(Old_dContainsKeyX)) &&  New_dCount != Old_dCount) && (!(Old_dContainsValueY))))) && (!(New_y == New_x)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && (!(Old_dContainsValueY)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsValueY

Houdini AlwaysTrue for k=1 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_dContainsKeyX
root Left implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Left implication check-- split pred: Not(Old_dContainsKeyX)
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_dCount != Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Left implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_dCount == Old_dCount
root Left implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Left from implication check-- split from pred Old_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_y == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (((New_y == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=1 : true

root Right implication check-- split pred: Old_dContainsKeyX
root Right implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right implication check-- split pred: Not(Old_dContainsKeyX)
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Right implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_dCount != Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root Right implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_dCount == Old_dCount
root Right implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == Old_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right Left:  for k = 1 : (New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount)

root Right Right:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount)
root Right:  for k = 2 : (true && (((New_dCount == Old_dCount + 1 && (!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount) && New_y == Old_dCount) || ((Old_y != Old_dCount && New_y != Old_dCount) && (!(New_y == Old_dCount)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && ((((Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (((New_y == Old_x &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsValueY) || ((true && (((New_dCount == Old_dCount + 1 &&  (!(Old_dContainsKeyX)) &&  New_dCount != Old_dCount &&  Old_y == Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && New_y == Old_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount) && (!(New_y == Old_dCount))))) && (!(Old_dContainsValueY)))))

#############
Round: 4

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_y == Old_x && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (((New_y == Old_x && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Right Left:  for k = 1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right:  for k = 2 : ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && ((((New_dCount == Old_dCount && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (((New_y == Old_x &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(Old_dContainsKeyX)))))

#############
Round: 5

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount)

root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x == New_dCount && New_x == New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y == Old_dCount && New_y == Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y == New_dCount && New_y == New_dCount && Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_y == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((New_dCount == Old_dCount) && (((New_y == Old_x && Old_x != Old_dCount && New_x != Old_dCount && Old_y != Old_dCount && New_y != Old_dCount && Old_x != New_dCount && New_x != New_dCount && Old_y != New_dCount && New_y != New_dCount && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Right Left:  for k = 1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right:  for k = 2 : ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && ((((New_dCount == Old_dCount) && (((New_y == Old_x &&  Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount &&  Old_y != New_dCount &&  New_y != New_dCount &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(Old_dContainsKeyX)))))

#############
Round: 6

Houdini AlwaysTrue for k=2 : (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y)

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (Old_dContainsValueY)
root implication check-- featureNeg: ((!(Old_dContainsValueY)))

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount)

root from implication check-- split from pred Not(New_dContainsKeyX): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsKeyX): not expressive in with conjunctions
root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(Old_dContainsValueY)))
root implication check-- featureNeg: (Old_dContainsValueY)

root from implication check-- split from pred Not(New_dContainsValueY): houdini Called with 0 feature vectors
root from implication check-- split from pred Not(New_dContainsValueY): not expressive in with conjunctions
root implication check-- split pred: New_dCount != Old_dCount
root implication check-- featurePos: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)
root implication check-- featureNeg: (Old_dContainsKeyX && New_dCount == Old_dCount)

root implication check-- split pred: New_dCount == Old_dCount
root implication check-- featurePos: (Old_dContainsKeyX && New_dCount == Old_dCount)
root implication check-- featureNeg: ((!(Old_dContainsKeyX)) && New_dCount != Old_dCount)

root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != Old_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == Old_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: Old_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: Old_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root implication check-- split pred: New_y != New_x
root implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root implication check-- split pred: New_y == New_x
root implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : Old_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount)

root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != Old_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == Old_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: Old_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: Old_y == New_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left implication check-- split pred: New_y != New_x
root Left implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Left implication check-- split pred: New_y == New_x
root Left implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Left implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Left Left:  for k = 1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Left Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Left:  for k = 2 : ((New_dCount == Old_dCount) && (((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount + 1 && New_dCount != Old_dCount)

root Right from implication check-- split from pred New_dCount == Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount == Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount)

root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != Old_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == Old_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: Old_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: Old_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right implication check-- split pred: New_y != New_x
root Right implication check-- featurePos: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right implication check-- featureNeg: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)

root Right implication check-- split pred: New_y == New_x
root Right implication check-- featurePos: (Old_y == Old_x && New_y == Old_x && Old_y == New_x && New_y == New_x)
root Right implication check-- featureNeg: (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_x

Houdini AlwaysTrue for k=0 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)

root Right Left:  for k = 1 : (New_y == Old_x && Old_y == Old_x && Old_y == New_x)
Houdini AlwaysTrue for k=0 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)

root Right Right:  for k = 1 : (Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x)
root Right:  for k = 2 : ((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x && Old_y == Old_x && Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x && New_y != Old_x && Old_y != New_x && New_y != New_x) && (!(New_y == New_x)))))
unsimplified post:
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && ((((New_dCount == Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(Old_dContainsKeyX)))))

===== Final Result for PUT_SetContract

postcondition k == 2
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y) && ((((New_dCount == Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && Old_dContainsKeyX) || (((New_dCount == Old_dCount + 1 && New_dCount != Old_dCount) && (((New_y == Old_x &&  Old_y == Old_x &&  Old_y == New_x) && New_y == New_x) || ((Old_y != Old_x &&  New_y != Old_x &&  Old_y != New_x &&  New_y != New_x) && (!(New_y == New_x))))) && (!(Old_dContainsKeyX)))))
rounds: 7

simplified post k == 2
((New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && New_dCount == Old_dCount && Old_dContainsKeyX) || (New_dContainsKeyX && New_dContainsValueY && New_dCount == 1 + Old_dCount && (!(Old_dContainsKeyX)) && Old_y == Old_x && Old_y == New_x && New_y == New_x) || (New_dContainsKeyX && New_dContainsValueY && New_x == Old_x && New_y == Old_y && New_dCount == 1 + Old_dCount && (!(Old_dContainsKeyX)) && (!(New_y == New_x))))
pex time: 895.919510602951

learn time: 434.91605615615845

Samples: 98

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_ContainsKeyContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && New_x == Old_x)

unsimplified post:
(New_dCount == Old_dCount && New_x == Old_x)

===== Final Result for PUT_ContainsKeyContract

postcondition k == 0
(New_dCount == Old_dCount && New_x == Old_x)
rounds: 2

simplified post k == 0
((New_dCount == Old_dCount && New_x == Old_x))
pex time: 254.58684086799622

learn time: 1.4022696018218994

Samples: 10

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : New_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_Ret && Old_dContainsKeyX && New_dCount == 1 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left:  for k = 1 : (New_Ret && Old_dContainsKeyX && New_dCount == 1 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && (((New_Ret && Old_dContainsKeyX && New_dCount == 1 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && New_dContainsKeyX) || (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (!(New_dContainsKeyX)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : New_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_Ret && Old_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left:  for k = 1 : (New_Ret && Old_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && (((New_Ret && Old_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && New_dContainsKeyX) || (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (!(New_dContainsKeyX)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 1 : New_dContainsKeyX

Houdini AlwaysTrue for k=0 : (New_Ret && Old_dContainsKeyX)

root Left:  for k = 1 : (New_Ret && Old_dContainsKeyX)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && (((New_Ret && Old_dContainsKeyX) && New_dContainsKeyX) || (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (!(New_dContainsKeyX)))))

===== Final Result for PUT_ContainsKeyContract

postcondition k == 1
((New_dCount == Old_dCount && New_x == Old_x) && (((New_Ret && Old_dContainsKeyX) && New_dContainsKeyX) || (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (!(New_dContainsKeyX)))))
rounds: 4

simplified post k == 1
((New_dCount == Old_dCount && New_x == Old_x && New_Ret && Old_dContainsKeyX && New_dContainsKeyX) || (New_dCount == Old_dCount && New_x == Old_x && (!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX))))
pex time: 536.392068862915

learn time: 22.47699284553528

Samples: 23

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsKeyX && New_dCount == 1 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_Ret && Old_dContainsKeyX && New_dCount == 1 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 0 && New_x == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_dCount == 0 && New_x == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_dCount == 0 && New_x == 0 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && ((((New_Ret && Old_dContainsKeyX && New_dCount == 1 && New_x == 0 && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && New_dContainsKeyX) || ((((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_dCount == 0 &&  New_x == 0 &&  Old_x == Old_dCount &&  New_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(New_dContainsKeyX)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x != Old_x

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_Ret && Old_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && ((((New_Ret && Old_dContainsKeyX && Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && ((false && New_x != Old_x) || (true && (!(New_x != Old_x))))) && New_dContainsKeyX) || ((((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(New_dContainsKeyX)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsKeyX)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_x == 1 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount)

root Left Left:  for k = 1 : (New_dCount == 1 && New_x == 1 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left:  for k = 2 : ((New_Ret && Old_dContainsKeyX) && (((New_dCount == 1 && New_x == 1 && Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && ((((New_Ret && Old_dContainsKeyX) && (((New_dCount == 1 &&  New_x == 1 &&  Old_x == Old_dCount &&  New_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && New_dContainsKeyX) || ((((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(New_dContainsKeyX)))))

#############
Round: 4

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_x == Old_x)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Old_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: New_dContainsKeyX
root implication check-- featurePos: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root implication check-- split pred: Not(Old_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root implication check-- split pred: Not(New_dContainsKeyX)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)))
root implication check-- featureNeg: (New_Ret && Old_dContainsKeyX && New_dContainsKeyX)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != Old_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == Old_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: Old_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: Old_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root implication check-- split pred: New_x != New_dCount
root implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root implication check-- split pred: New_x == New_dCount
root implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsKeyX

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsKeyX)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsKeyX): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsKeyX): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != Old_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == Old_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: Old_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: Old_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left implication check-- split pred: New_x != New_dCount
root Left implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Left implication check-- split pred: New_x == New_dCount
root Left implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Left implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)

root Left Left:  for k = 1 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Left Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Left:  for k = 2 : ((New_Ret && Old_dContainsKeyX) && (((New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsKeyX)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsKeyX: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsKeyX: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != Old_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == Old_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: Old_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: Old_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right implication check-- split pred: New_x != New_dCount
root Right implication check-- featurePos: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right implication check-- featureNeg: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)

root Right implication check-- split pred: New_x == New_dCount
root Right implication check-- featurePos: (Old_x == Old_dCount && New_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount)
root Right implication check-- featureNeg: (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right from implication check-- split from pred New_x != Old_x: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_x != Old_x: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_x == New_dCount

Houdini AlwaysTrue for k=0 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)

root Right Left:  for k = 1 : (New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)

root Right Right:  for k = 1 : (Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount && Old_x == Old_dCount && Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount && New_x != Old_dCount && Old_x != New_dCount && New_x != New_dCount) && (!(New_x == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_x == Old_x) && ((((New_Ret && Old_dContainsKeyX) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && New_dContainsKeyX) || ((((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(New_dContainsKeyX)))))

===== Final Result for PUT_ContainsKeyContract

postcondition k == 2
((New_dCount == Old_dCount && New_x == Old_x) && ((((New_Ret && Old_dContainsKeyX) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && New_dContainsKeyX) || ((((!(New_Ret)) && (!(Old_dContainsKeyX))) && (((New_x == Old_dCount &&  Old_x == Old_dCount &&  Old_x == New_dCount) && New_x == New_dCount) || ((Old_x != Old_dCount &&  New_x != Old_dCount &&  Old_x != New_dCount &&  New_x != New_dCount) && (!(New_x == New_dCount))))) && (!(New_dContainsKeyX)))))
rounds: 5

simplified post k == 2
((New_dCount == Old_dCount && New_x == Old_x && New_Ret && Old_dContainsKeyX && New_dContainsKeyX) || ((!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && Old_x == Old_dCount && Old_x == New_dCount && New_x == New_dCount) || (New_dCount == Old_dCount && New_x == Old_x && (!(New_Ret)) && (!(Old_dContainsKeyX)) && (!(New_dContainsKeyX)) && (!(New_x == New_dCount))))
pex time: 641.4583024978638

learn time: 65.74289131164551

Samples: 37

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_ContainsValueContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && New_y == Old_y)

unsimplified post:
(New_dCount == Old_dCount && New_y == Old_y)

===== Final Result for PUT_ContainsValueContract

postcondition k == 0
(New_dCount == Old_dCount && New_y == Old_y)
rounds: 2

simplified post k == 0
((New_dCount == Old_dCount && New_y == Old_y))
pex time: 181.57561135292053

learn time: 1.5618236064910889

Samples: 8

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_y == Old_y)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Not(New_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_dContainsValueY

Houdini AlwaysTrue for k=0 : (New_Ret && Old_dContainsValueY && New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left:  for k = 1 : (New_Ret && Old_dContainsValueY && New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
Houdini AlwaysTrue for k=0 : (New_y == Old_dCount && (!(New_Ret)) && (!(Old_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right:  for k = 1 : (New_y == Old_dCount && (!(New_Ret)) && (!(Old_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
unsimplified post:
((New_dCount == Old_dCount && New_y == Old_y) && (((New_Ret && Old_dContainsValueY && New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && New_dContainsValueY) || ((New_y == Old_dCount && (!(New_Ret)) && (!(Old_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount) && (!(New_dContainsValueY)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_y == Old_y)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: New_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(New_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 1 : New_dContainsValueY

Houdini AlwaysTrue for k=0 : (New_Ret && Old_dContainsValueY)

root Left:  for k = 1 : (New_Ret && Old_dContainsValueY)
Houdini AlwaysTrue for k=0 : ((!(New_Ret)) && (!(Old_dContainsValueY)))

root Right:  for k = 1 : ((!(New_Ret)) && (!(Old_dContainsValueY)))
unsimplified post:
((New_dCount == Old_dCount && New_y == Old_y) && (((New_Ret && Old_dContainsValueY) && New_dContainsValueY) || (((!(New_Ret)) && (!(Old_dContainsValueY))) && (!(New_dContainsValueY)))))

===== Final Result for PUT_ContainsValueContract

postcondition k == 1
((New_dCount == Old_dCount && New_y == Old_y) && (((New_Ret && Old_dContainsValueY) && New_dContainsValueY) || (((!(New_Ret)) && (!(Old_dContainsValueY))) && (!(New_dContainsValueY)))))
rounds: 3

simplified post k == 1
((New_dCount == Old_dCount && New_y == Old_y && New_Ret && Old_dContainsValueY && New_dContainsValueY) || (New_dCount == Old_dCount && New_y == Old_y && (!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY))))
pex time: 327.80089688301086

learn time: 17.555994987487793

Samples: 14

Not(k0 -> k1)? sat

Not(k1 -> k0)? sat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_y == Old_y)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Not(New_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsValueY

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsValueY && New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsValueY): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsValueY): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred Old_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred Old_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y == New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y == New_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y != Old_y

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_Ret && Old_dContainsValueY && New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && ((false && New_y != Old_y) || (true && (!(New_y != Old_y)))))
Houdini AlwaysTrue for k=1 : (New_y == Old_dCount && (!(New_Ret)) && (!(Old_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsValueY: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsValueY: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_y != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred Old_y != New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_y != New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_y != New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != New_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : None

root Right:  for k = 2 : (New_y == Old_dCount && (!(New_Ret)) && (!(Old_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
unsimplified post:
((New_dCount == Old_dCount && New_y == Old_y) && ((((New_Ret && Old_dContainsValueY && New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && ((false && New_y != Old_y) || (true && (!(New_y != Old_y))))) && New_dContainsValueY) || ((New_y == Old_dCount && (!(New_Ret)) && (!(Old_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount) && (!(New_dContainsValueY)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_y == Old_y)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: New_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(New_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsValueY

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsValueY)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsValueY): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsValueY): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_y == 1 && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount)

root Left Left:  for k = 1 : (New_dCount == 1 && New_y == 1 && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount)
Houdini AlwaysTrue for k=0 : (New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left Right:  for k = 1 : (New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left:  for k = 2 : ((New_Ret && Old_dContainsValueY) && (((New_dCount == 1 && New_y == 1 && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount) && New_y == New_dCount) || ((New_y == 0 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (!(New_y == New_dCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsValueY)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsValueY: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsValueY: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_dCount

Houdini AlwaysTrue for k=0 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)

root Right Left:  for k = 1 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)
Houdini AlwaysTrue for k=0 : (New_dCount == 0 && New_y == 1 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right Right:  for k = 1 : (New_dCount == 0 && New_y == 1 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount) && New_y == New_dCount) || ((New_dCount == 0 && New_y == 1 && Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (!(New_y == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_y == Old_y) && ((((New_Ret && Old_dContainsValueY) && (((New_dCount == 1 &&  New_y == 1 &&  Old_y == Old_dCount &&  New_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((New_y == 0 &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && New_dContainsValueY) || ((((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((New_dCount == 0 &&  New_y == 1 &&  Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && (!(New_dContainsValueY)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_y == Old_y)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: New_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(New_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsValueY

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsValueY)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsValueY): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsValueY): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_dCount

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_y == 1 && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount)

root Left Left:  for k = 1 : (New_dCount == 1 && New_y == 1 && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left Right:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left:  for k = 2 : ((New_Ret && Old_dContainsValueY) && (((New_dCount == 1 && New_y == 1 && Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (!(New_y == New_dCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsValueY)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsValueY: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsValueY: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_dCount

Houdini AlwaysTrue for k=0 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)

root Right Left:  for k = 1 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right Right:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (!(New_y == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_y == Old_y) && ((((New_Ret && Old_dContainsValueY) && (((New_dCount == 1 &&  New_y == 1 &&  Old_y == Old_dCount &&  New_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && New_dContainsValueY) || ((((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && (!(New_dContainsValueY)))))

#############
Round: 4

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_y == Old_y)

root implication check-- split pred: New_Ret
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Old_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: New_dContainsValueY
root implication check-- featurePos: (New_Ret && Old_dContainsValueY && New_dContainsValueY)
root implication check-- featureNeg: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))

root implication check-- split pred: Not(New_Ret)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(Old_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root implication check-- split pred: Not(New_dContainsValueY)
root implication check-- featurePos: ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)))
root implication check-- featureNeg: (New_Ret && Old_dContainsValueY && New_dContainsValueY)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root implication check-- split pred: Old_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != Old_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == Old_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: Old_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: Old_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root implication check-- split pred: New_y != New_dCount
root implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root implication check-- split pred: New_y == New_dCount
root implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root for k = 2 : New_dContainsValueY

Houdini AlwaysTrue for k=1 : (New_Ret && Old_dContainsValueY)

root Left from implication check-- split from pred Not(New_Ret): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(New_Ret): not expressive in with conjunctions
root Left from implication check-- split from pred Not(Old_dContainsValueY): houdini Called with 0 feature vectors
root Left from implication check-- split from pred Not(Old_dContainsValueY): not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left implication check-- split pred: Old_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != Old_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == Old_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: Old_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: Old_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left implication check-- split pred: New_y != New_dCount
root Left implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Left implication check-- split pred: New_y == New_dCount
root Left implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Left implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_y == New_dCount

Houdini AlwaysTrue for k=0 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)

root Left Left:  for k = 1 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Left Right:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Left:  for k = 2 : ((New_Ret && Old_dContainsValueY) && (((New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (!(New_y == New_dCount)))))
Houdini AlwaysTrue for k=1 : ((!(New_Ret)) && (!(Old_dContainsValueY)))

root Right from implication check-- split from pred New_Ret: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret: not expressive in with conjunctions
root Right from implication check-- split from pred Old_dContainsValueY: houdini Called with 0 feature vectors
root Right from implication check-- split from pred Old_dContainsValueY: not expressive in with conjunctions
root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right implication check-- split pred: Old_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != Old_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == Old_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: Old_y != New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: Old_y == New_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right implication check-- split pred: New_y != New_dCount
root Right implication check-- featurePos: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right implication check-- featureNeg: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)

root Right implication check-- split pred: New_y == New_dCount
root Right implication check-- featurePos: (Old_y == Old_dCount && New_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount)
root Right implication check-- featureNeg: (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right from implication check-- split from pred New_y != Old_y: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_y != Old_y: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_y == New_dCount

Houdini AlwaysTrue for k=0 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)

root Right Left:  for k = 1 : (New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount)
Houdini AlwaysTrue for k=0 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)

root Right Right:  for k = 1 : (Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount)
root Right:  for k = 2 : (((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount && Old_y == Old_dCount && Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount && New_y != Old_dCount && Old_y != New_dCount && New_y != New_dCount) && (!(New_y == New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_y == Old_y) && ((((New_Ret && Old_dContainsValueY) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && New_dContainsValueY) || ((((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && (!(New_dContainsValueY)))))

===== Final Result for PUT_ContainsValueContract

postcondition k == 2
((New_dCount == Old_dCount && New_y == Old_y) && ((((New_Ret && Old_dContainsValueY) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && New_dContainsValueY) || ((((!(New_Ret)) && (!(Old_dContainsValueY))) && (((New_y == Old_dCount &&  Old_y == Old_dCount &&  Old_y == New_dCount) && New_y == New_dCount) || ((Old_y != Old_dCount &&  New_y != Old_dCount &&  Old_y != New_dCount &&  New_y != New_dCount) && (!(New_y == New_dCount))))) && (!(New_dContainsValueY)))))
rounds: 5

simplified post k == 2
((New_dCount == Old_dCount && New_y == Old_y && New_Ret && Old_dContainsValueY && New_dContainsValueY) || ((!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && Old_y == Old_dCount && Old_y == New_dCount && New_y == New_dCount) || (New_dCount == Old_dCount && New_y == Old_y && (!(New_Ret)) && (!(Old_dContainsValueY)) && (!(New_dContainsValueY)) && (!(New_y == New_dCount))))
pex time: 510.90206360816956

learn time: 60.59385108947754

Samples: 32

Not(k0 -> k2)? sat

Not(k1 -> k2)? unsat

PUT: PUT_CountContract

=====
Case: k == 0

#############
Round: 1

Houdini AlwaysTrue for k=0 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

unsimplified post:
(New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

===== Final Result for PUT_CountContract

postcondition k == 0
(New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)
rounds: 2

simplified post k == 0
((New_Ret == Old_dCount && New_Ret == New_dCount))
pex time: 263.4273669719696

learn time: 1.2855634689331055

Samples: 14

=====
Case: k == 1

#############
Round: 1

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root implication check-- split pred: New_ContainsValueNewRet
root implication check-- featurePos: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: ((!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsValueNewRet)
root implication check-- featurePos: ((!(New_ContainsValueNewRet)))
root implication check-- featureNeg: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root for k = 1 : New_ContainsValueNewRet

Houdini AlwaysTrue for k=0 : (New_dCount == 1 && New_Ret == 1 && (!(New_ContainsKeyNewRet)))

root Left:  for k = 1 : (New_dCount == 1 && New_Ret == 1 && (!(New_ContainsKeyNewRet)))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount) && (((New_dCount == 1 && New_Ret == 1 && (!(New_ContainsKeyNewRet))) && New_ContainsValueNewRet) || (true && (!(New_ContainsValueNewRet)))))

#############
Round: 2

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root implication check-- split pred: New_ContainsValueNewRet
root implication check-- featurePos: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: ((!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsValueNewRet)
root implication check-- featurePos: ((!(New_ContainsValueNewRet)))
root implication check-- featureNeg: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root for k = 1 : New_ContainsValueNewRet

Houdini AlwaysTrue for k=0 : ((!(New_ContainsKeyNewRet)))

root Left:  for k = 1 : ((!(New_ContainsKeyNewRet)))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right:  for k = 1 : true
unsimplified post:
((New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount) && ((((!(New_ContainsKeyNewRet))) && New_ContainsValueNewRet) || (true && (!(New_ContainsValueNewRet)))))

#############
Round: 3

Houdini AlwaysTrue for k=1 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root implication check-- split pred: New_ContainsValueNewRet
root implication check-- featurePos: (New_ContainsValueNewRet)
root implication check-- featureNeg: ((!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root implication check-- split pred: Not(New_ContainsValueNewRet)
root implication check-- featurePos: ((!(New_ContainsValueNewRet)))
root implication check-- featureNeg: (New_ContainsValueNewRet)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root for k = 1 : None

unsimplified post:
(New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

===== Final Result for PUT_CountContract

postcondition k == 1
(New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)
rounds: 4

simplified post k == 1
((New_Ret == Old_dCount && New_Ret == New_dCount))
pex time: 517.0802583694458

learn time: 11.882835149765015

Samples: 31

Not(k0 -> k1)? unsat

Not(k1 -> k0)? unsat

=====
Case: k == 2

#############
Round: 1

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root implication check-- split pred: New_ContainsValueNewRet
root implication check-- featurePos: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: ((!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsValueNewRet)
root implication check-- featurePos: ((!(New_ContainsValueNewRet)))
root implication check-- featureNeg: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root for k = 2 : New_ContainsValueNewRet

Houdini AlwaysTrue for k=1 : (New_dCount == 1 && New_Ret == 1 && (!(New_ContainsKeyNewRet)))

root Left from implication check-- split from pred New_ContainsKeyNewRet: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_ContainsKeyNewRet: not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_Ret != Old_dCount

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : ((New_dCount == 1 && New_Ret == 1 && (!(New_ContainsKeyNewRet))) && ((false && New_Ret != Old_dCount) || (true && (!(New_Ret != Old_dCount)))))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=1 : true

root Right implication check-- split pred: New_ContainsKeyNewRet
root Right implication check-- featurePos: (New_ContainsKeyNewRet)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root Right implication check-- split pred: Not(New_ContainsKeyNewRet)
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root Right implication check-- featureNeg: (New_ContainsKeyNewRet)

root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_Ret != New_dCount

called learn3 with 0 feature vectors
root Right Left:  for k = 1 : false
root Right Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right Right:  for k = 1 : true
root Right:  for k = 2 : (true && ((false && New_Ret != New_dCount) || (true && (!(New_Ret != New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount) && ((((New_dCount == 1 && New_Ret == 1 && (!(New_ContainsKeyNewRet))) && ((false && New_Ret != Old_dCount) || (true && (!(New_Ret != Old_dCount))))) && New_ContainsValueNewRet) || ((true && ((false && New_Ret != New_dCount) || (true && (!(New_Ret != New_dCount))))) && (!(New_ContainsValueNewRet)))))

#############
Round: 2

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root implication check-- split pred: New_ContainsValueNewRet
root implication check-- featurePos: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: ((!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: (New_ContainsKeyNewRet && (!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsValueNewRet)
root implication check-- featurePos: ((!(New_ContainsValueNewRet)))
root implication check-- featureNeg: (New_ContainsValueNewRet && (!(New_ContainsKeyNewRet)))

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root for k = 2 : New_ContainsValueNewRet

Houdini AlwaysTrue for k=1 : ((!(New_ContainsKeyNewRet)))

root Left from implication check-- split from pred New_ContainsKeyNewRet: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_ContainsKeyNewRet: not expressive in with conjunctions
root Left from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root Left from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root Left from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root Left for k = 1 : New_Ret != New_dCount

called learn3 with 0 feature vectors
root Left Left:  for k = 1 : false
root Left Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Left Right:  for k = 1 : true
root Left:  for k = 2 : (((!(New_ContainsKeyNewRet))) && ((false && New_Ret != New_dCount) || (true && (!(New_Ret != New_dCount)))))
root Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=1 : true

root Right implication check-- split pred: New_ContainsKeyNewRet
root Right implication check-- featurePos: (New_ContainsKeyNewRet)
root Right implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root Right implication check-- split pred: Not(New_ContainsKeyNewRet)
root Right implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root Right implication check-- featureNeg: (New_ContainsKeyNewRet)

root Right from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root Right from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root Right from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root Right for k = 1 : New_Ret != New_dCount

called learn3 with 0 feature vectors
root Right Left:  for k = 1 : false
root Right Right: not expressive in with conjunctions
Houdini AlwaysTrue for k=0 : true

root Right Right:  for k = 1 : true
root Right:  for k = 2 : (true && ((false && New_Ret != New_dCount) || (true && (!(New_Ret != New_dCount)))))
unsimplified post:
((New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount) && (((((!(New_ContainsKeyNewRet))) && ((false && New_Ret != New_dCount) || (true && (!(New_Ret != New_dCount))))) && New_ContainsValueNewRet) || ((true && ((false && New_Ret != New_dCount) || (true && (!(New_Ret != New_dCount))))) && (!(New_ContainsValueNewRet)))))

#############
Round: 3

Houdini AlwaysTrue for k=2 : (New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

root implication check-- split pred: New_ContainsKeyNewRet
root implication check-- featurePos: (New_ContainsKeyNewRet)
root implication check-- featureNeg: ((!(New_ContainsKeyNewRet)))

root implication check-- split pred: New_ContainsValueNewRet
root implication check-- featurePos: (New_ContainsValueNewRet)
root implication check-- featureNeg: ((!(New_ContainsValueNewRet)))

root implication check-- split pred: Not(New_ContainsKeyNewRet)
root implication check-- featurePos: ((!(New_ContainsKeyNewRet)))
root implication check-- featureNeg: (New_ContainsKeyNewRet)

root implication check-- split pred: Not(New_ContainsValueNewRet)
root implication check-- featurePos: ((!(New_ContainsValueNewRet)))
root implication check-- featureNeg: (New_ContainsValueNewRet)

root from implication check-- split from pred New_dCount != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_dCount != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != Old_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != Old_dCount: not expressive in with conjunctions
root from implication check-- split from pred New_Ret != New_dCount: houdini Called with 0 feature vectors
root from implication check-- split from pred New_Ret != New_dCount: not expressive in with conjunctions
Predicate: root for k = 2 : None

unsimplified post:
(New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)

===== Final Result for PUT_CountContract

postcondition k == 2
(New_dCount == Old_dCount && New_Ret == Old_dCount && New_Ret == New_dCount)
rounds: 4

simplified post k == 2
((New_Ret == Old_dCount && New_Ret == New_dCount))
pex time: 530.8795187473297

learn time: 18.093244075775146

Samples: 30

Not(k0 -> k2)? unsat

Not(k1 -> k2)? unsat
