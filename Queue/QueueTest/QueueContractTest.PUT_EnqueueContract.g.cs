// <copyright file="QueueContractTest.PUT_EnqueueContract.g.cs">Copyright ©  2019</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Queue;
using Queue.Test.Factories;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;

namespace Queue.Test
{
    public partial class QueueContractTest
    {
[TestMethod]
[PexGeneratedBy(typeof(QueueContractTest))]
public void PUT_EnqueueContract405()
{
    Queue<int> queue;
    int[] ints = new int[0];
    queue = QueueFactory.Create(ints);
    this.PUT_EnqueueContract(queue, 0);
    Assert.IsNotNull((object)queue);
    Assert.AreEqual<int>(1, queue.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(QueueContractTest))]
public void PUT_EnqueueContract5()
{
    Queue<int> queue;
    int[] ints = new int[1];
    queue = QueueFactory.Create(ints);
    this.PUT_EnqueueContract(queue, 0);
    Assert.IsNotNull((object)queue);
    Assert.AreEqual<int>(2, queue.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(QueueContractTest))]
public void PUT_EnqueueContract958()
{
    Queue<int> queue;
    int[] ints = new int[0];
    queue = QueueFactory.Create(ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(1).DefaultSession
        .At(0, "old_top", (object)1);
    this.PUT_EnqueueContract(queue, 0);
    Assert.IsNotNull((object)queue);
    Assert.AreEqual<int>(1, queue.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(QueueContractTest))]
public void PUT_EnqueueContract01()
{
    Queue<int> queue;
    int[] ints = new int[3];
    queue = QueueFactory.Create(ints);
    this.PUT_EnqueueContract(queue, 0);
    Assert.IsNotNull((object)queue);
    Assert.AreEqual<int>(4, queue.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(QueueContractTest))]
public void PUT_EnqueueContract150()
{
    Queue<int> queue;
    int[] ints = new int[4];
    queue = QueueFactory.Create(ints);
    this.PUT_EnqueueContract(queue, 0);
    Assert.IsNotNull((object)queue);
    Assert.AreEqual<int>(5, queue.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(QueueContractTest))]
public void PUT_EnqueueContract579()
{
    Queue<int> queue;
    int[] ints = new int[4];
    queue = QueueFactory.Create(ints);
    this.PUT_EnqueueContract(queue, 1);
    Assert.IsNotNull((object)queue);
    Assert.AreEqual<int>(5, queue.Count);
}
    }
}
