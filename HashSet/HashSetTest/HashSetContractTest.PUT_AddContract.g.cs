// <copyright file="HashSetContractTest.PUT_AddContract.g.cs">Copyright ©  2019</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using HashSet;
using HashSet.Test.Factories;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;

namespace HashSet.Test
{
    public partial class HashSetContractTest
    {
[TestMethod]
[PexGeneratedBy(typeof(HashSetContractTest))]
public void PUT_AddContract405()
{
    HashSet<int> hashSet;
    int[] ints = new int[0];
    hashSet = HashSetFactory.Create(ints);
    this.PUT_AddContract(hashSet, 0);
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(1, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(HashSetContractTest))]
public void PUT_AddContract75()
{
    HashSet<int> hashSet;
    int[] ints = new int[1];
    hashSet = HashSetFactory.Create(ints);
    this.PUT_AddContract(hashSet, 0);
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(1, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(HashSetContractTest))]
public void PUT_AddContract380()
{
    HashSet<int> hashSet;
    int[] ints = new int[1];
    ints[0] = 14;
    hashSet = HashSetFactory.Create(ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    this.PUT_AddContract(hashSet, 1934);
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(2, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(HashSetContractTest))]
public void PUT_AddContract17()
{
    HashSet<int> hashSet;
    int[] ints = new int[2];
    ints[0] = 25178112;
    ints[1] = -2122305536;
    hashSet = HashSetFactory.Create(ints);
    this.PUT_AddContract(hashSet, 0);
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(3, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(HashSetContractTest))]
public void PUT_AddContract965()
{
    HashSet<int> hashSet;
    int[] ints = new int[3];
    ints[0] = 481;
    ints[1] = 256;
    ints[2] = 320;
    hashSet = HashSetFactory.Create(ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    this.PUT_AddContract(hashSet, 91);
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(4, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(HashSetContractTest))]
public void PUT_AddContract822()
{
    HashSet<int> hashSet;
    int[] ints = new int[5];
    ints[0] = 28678;
    ints[1] = -2147454970;
    ints[2] = 1;
    ints[3] = 7340033;
    ints[4] = 3;
    hashSet = HashSetFactory.Create(ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    this.PUT_AddContract(hashSet, 28678);
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(5, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
    }
}
