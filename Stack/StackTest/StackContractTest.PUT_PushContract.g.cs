// <copyright file="StackContractTest.PUT_PushContract.g.cs">Copyright ©  2019</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Stack;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Stack.Test.Factories;

namespace Stack.Test
{
    public partial class StackContractTest
    {
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: assumption violation")]
public void PUT_PushContractThrowsPexAssumeFailedException942()
{
    Stack<int> stack = new Stack<int>();
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[PexRaisedException(typeof(InvalidOperationException))]
public void PUT_PushContractThrowsInvalidOperationException894()
{
    Stack<int> stack;
    int[] ints = new int[0];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract345()
{
    Stack<int> stack;
    int[] ints = new int[1];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(2, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract70()
{
    Stack<int> stack;
    int[] ints = new int[1];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(2, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract702()
{
    Stack<int> stack;
    int[] ints = new int[2];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(3, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract225()
{
    Stack<int> stack;
    int[] ints = new int[3];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(4, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException149()
{
    Stack<int> stack;
    int[] ints = new int[4];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract166()
{
    Stack<int> stack;
    int[] ints = new int[4];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(5, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract359()
{
    Stack<int> stack;
    int[] ints = new int[5];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(6, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract896()
{
    Stack<int> stack;
    int[] ints = new int[6];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(7, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException703()
{
    Stack<int> stack;
    int[] ints = new int[7];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract136()
{
    Stack<int> stack;
    int[] ints = new int[7];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(8, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException626()
{
    Stack<int> stack;
    int[] ints = new int[8];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract364()
{
    Stack<int> stack;
    int[] ints = new int[8];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(9, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract736()
{
    Stack<int> stack;
    int[] ints = new int[9];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(10, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract368()
{
    Stack<int> stack;
    int[] ints = new int[10];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(11, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract216()
{
    Stack<int> stack;
    int[] ints = new int[11];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(12, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract914()
{
    Stack<int> stack;
    int[] ints = new int[12];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(13, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract104()
{
    Stack<int> stack;
    int[] ints = new int[13];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(14, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract36()
{
    Stack<int> stack;
    int[] ints = new int[14];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(15, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract277()
{
    Stack<int> stack;
    int[] ints = new int[15];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(16, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException913()
{
    Stack<int> stack;
    int[] ints = new int[16];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract620()
{
    Stack<int> stack;
    int[] ints = new int[16];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(17, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract944()
{
    Stack<int> stack;
    int[] ints = new int[17];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(18, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract604()
{
    Stack<int> stack;
    int[] ints = new int[18];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(19, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract617()
{
    Stack<int> stack;
    int[] ints = new int[19];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(20, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract236()
{
    Stack<int> stack;
    int[] ints = new int[20];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(21, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract287()
{
    Stack<int> stack;
    int[] ints = new int[3];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(4, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract862()
{
    Stack<int> stack;
    int[] ints = new int[21];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(22, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract310()
{
    Stack<int> stack;
    int[] ints = new int[22];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(23, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract91()
{
    Stack<int> stack;
    int[] ints = new int[23];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(24, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract11()
{
    Stack<int> stack;
    int[] ints = new int[24];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(25, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract247()
{
    Stack<int> stack;
    int[] ints = new int[25];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(26, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract892()
{
    Stack<int> stack;
    int[] ints = new int[26];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(27, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract911()
{
    Stack<int> stack;
    int[] ints = new int[27];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(28, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract377()
{
    Stack<int> stack;
    int[] ints = new int[28];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(29, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract170()
{
    Stack<int> stack;
    int[] ints = new int[29];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(30, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract233()
{
    Stack<int> stack;
    int[] ints = new int[30];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(31, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract857()
{
    Stack<int> stack;
    int[] ints = new int[31];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(32, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract61()
{
    Stack<int> stack;
    int[] ints = new int[2];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(3, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException665()
{
    Stack<int> stack;
    int[] ints = new int[32];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract340()
{
    Stack<int> stack;
    int[] ints = new int[32];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(33, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract741()
{
    Stack<int> stack;
    int[] ints = new int[33];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(34, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract958()
{
    Stack<int> stack;
    int[] ints = new int[34];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(35, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract64()
{
    Stack<int> stack;
    int[] ints = new int[35];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(36, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract974()
{
    Stack<int> stack;
    int[] ints = new int[36];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(37, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract874()
{
    Stack<int> stack;
    int[] ints = new int[37];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(38, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract623()
{
    Stack<int> stack;
    int[] ints = new int[38];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(39, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract650()
{
    Stack<int> stack;
    int[] ints = new int[39];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(40, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract181()
{
    Stack<int> stack;
    int[] ints = new int[40];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(41, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract79()
{
    Stack<int> stack;
    int[] ints = new int[41];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(42, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract930()
{
    Stack<int> stack;
    int[] ints = new int[42];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(43, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract565()
{
    Stack<int> stack;
    int[] ints = new int[2];
    ints[1] = 1;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(3, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract94()
{
    Stack<int> stack;
    int[] ints = new int[5];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(6, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract353()
{
    Stack<int> stack;
    int[] ints = new int[43];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(44, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract765()
{
    Stack<int> stack;
    int[] ints = new int[44];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(45, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract53()
{
    Stack<int> stack;
    int[] ints = new int[45];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(46, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract25()
{
    Stack<int> stack;
    int[] ints = new int[46];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(47, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract246()
{
    Stack<int> stack;
    int[] ints = new int[47];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(48, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract573()
{
    Stack<int> stack;
    int[] ints = new int[48];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(49, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract652()
{
    Stack<int> stack;
    int[] ints = new int[49];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(50, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract393()
{
    Stack<int> stack;
    int[] ints = new int[50];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(51, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract591()
{
    Stack<int> stack;
    int[] ints = new int[51];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(52, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract582()
{
    Stack<int> stack;
    int[] ints = new int[5];
    ints[1] = 2097152;
    ints[4] = 2097408;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 2097152);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(6, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract665()
{
    Stack<int> stack;
    int[] ints = new int[52];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(53, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract691()
{
    Stack<int> stack;
    int[] ints = new int[53];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(54, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract708()
{
    Stack<int> stack;
    int[] ints = new int[24];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(25, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract271()
{
    Stack<int> stack;
    int[] ints = new int[54];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(55, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract6101()
{
    Stack<int> stack;
    int[] ints = new int[55];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(56, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract786()
{
    Stack<int> stack;
    int[] ints = new int[56];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(57, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract948()
{
    Stack<int> stack;
    int[] ints = new int[49];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(50, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract58201()
{
    Stack<int> stack;
    int[] ints = new int[57];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(58, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract486()
{
    Stack<int> stack;
    int[] ints = new int[58];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(59, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract759()
{
    Stack<int> stack;
    int[] ints = new int[24];
    ints[5] = 1;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(25, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract386()
{
    Stack<int> stack;
    int[] ints = new int[59];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(60, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract826()
{
    Stack<int> stack;
    int[] ints = new int[60];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(61, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract417()
{
    Stack<int> stack;
    int[] ints = new int[61];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(62, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract725()
{
    Stack<int> stack;
    int[] ints = new int[24];
    ints[11] = 2;
    ints[12] = 32;
    ints[13] = 33554432;
    ints[14] = 16777216;
    ints[15] = 4096;
    ints[16] = 33554432;
    ints[17] = 131073;
    ints[18] = 1;
    ints[19] = 1;
    ints[20] = 1;
    ints[21] = 131073;
    ints[22] = 1024;
    ints[23] = 268435457;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(25, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException553()
{
    Stack<int> stack;
    int[] ints = new int[4];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract876()
{
    Stack<int> stack;
    int[] ints = new int[4];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(5, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract851()
{
    Stack<int> stack;
    int[] ints = new int[62];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(63, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract119()
{
    Stack<int> stack;
    int[] ints = new int[63];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(64, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException120()
{
    Stack<int> stack;
    int[] ints = new int[64];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract686()
{
    Stack<int> stack;
    int[] ints = new int[64];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(65, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract414()
{
    Stack<int> stack;
    int[] ints = new int[65];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(66, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract995()
{
    Stack<int> stack;
    int[] ints = new int[66];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(67, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract900()
{
    Stack<int> stack;
    int[] ints = new int[67];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(68, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract23301()
{
    Stack<int> stack;
    int[] ints = new int[68];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(69, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract242()
{
    Stack<int> stack;
    int[] ints = new int[69];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(70, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract132()
{
    Stack<int> stack;
    int[] ints = new int[3];
    ints[1] = 512;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 512);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(4, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract86201()
{
    Stack<int> stack;
    int[] ints = new int[70];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(71, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract883()
{
    Stack<int> stack;
    int[] ints = new int[71];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(72, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract384()
{
    Stack<int> stack;
    int[] ints = new int[72];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(73, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract18()
{
    Stack<int> stack;
    int[] ints = new int[73];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(74, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract446()
{
    Stack<int> stack;
    int[] ints = new int[74];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(75, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract625()
{
    Stack<int> stack;
    int[] ints = new int[75];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(76, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract910()
{
    Stack<int> stack;
    int[] ints = new int[76];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(77, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract337()
{
    Stack<int> stack;
    int[] ints = new int[77];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(78, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract988()
{
    Stack<int> stack;
    int[] ints = new int[78];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(79, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract93001()
{
    Stack<int> stack;
    int[] ints = new int[79];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(80, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract673()
{
    Stack<int> stack;
    int[] ints = new int[80];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(81, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract1()
{
    Stack<int> stack;
    int[] ints = new int[81];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(82, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract875()
{
    Stack<int> stack;
    int[] ints = new int[24];
    ints[14] = 1048576;
    ints[15] = 3145728;
    ints[20] = 32768;
    ints[21] = 1;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1048576);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(25, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract130()
{
    Stack<int> stack;
    int[] ints = new int[82];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(83, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract745()
{
    Stack<int> stack;
    int[] ints = new int[83];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(84, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract41401()
{
    Stack<int> stack;
    int[] ints = new int[84];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(85, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract120()
{
    Stack<int> stack;
    int[] ints = new int[85];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(86, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract264()
{
    Stack<int> stack;
    int[] ints = new int[86];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(87, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract419()
{
    Stack<int> stack;
    int[] ints = new int[3];
    ints[0] = 1;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(4, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract459()
{
    Stack<int> stack;
    int[] ints = new int[87];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(88, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract987()
{
    Stack<int> stack;
    int[] ints = new int[88];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(89, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract520()
{
    Stack<int> stack;
    int[] ints = new int[89];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(90, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract695()
{
    Stack<int> stack;
    int[] ints = new int[90];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(91, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract13201()
{
    Stack<int> stack;
    int[] ints = new int[91];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(92, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract41901()
{
    Stack<int> stack;
    int[] ints = new int[24];
    ints[7] = 8388608;
    ints[8] = 1;
    ints[9] = 262144;
    ints[10] = 16777216;
    ints[11] = 8388672;
    ints[12] = 1;
    ints[13] = 1;
    ints[14] = 1;
    ints[15] = 1;
    ints[16] = 8388616;
    ints[17] = 32;
    ints[18] = 128;
    ints[19] = 8388640;
    ints[20] = 8388609;
    ints[22] = 4194304;
    ints[23] = 268435456;
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 8388608);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(25, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract733()
{
    Stack<int> stack;
    int[] ints = new int[92];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(93, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract396()
{
    Stack<int> stack;
    int[] ints = new int[93];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(94, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract41701()
{
    Stack<int> stack;
    int[] ints = new int[94];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(95, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract924()
{
    Stack<int> stack;
    int[] ints = new int[95];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(96, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract65001()
{
    Stack<int> stack;
    int[] ints = new int[96];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(97, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract16601()
{
    Stack<int> stack;
    int[] ints = new int[97];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(98, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract570()
{
    Stack<int> stack;
    int[] ints = new int[98];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(99, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract346()
{
    Stack<int> stack;
    int[] ints = new int[99];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(100, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void PUT_PushContractThrowsMinimizationRequestException360()
{
    Stack<int> stack;
    int[] ints = new int[32];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 1);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract571()
{
    Stack<int> stack;
    int[] ints = new int[100];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(101, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract447()
{
    Stack<int> stack;
    int[] ints = new int[101];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(102, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract738()
{
    Stack<int> stack;
    int[] ints = new int[102];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(103, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract57()
{
    Stack<int> stack;
    int[] ints = new int[103];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(104, stack.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(StackContractTest))]
public void PUT_PushContract412()
{
    Stack<int> stack;
    int[] ints = new int[104];
    stack = StackFactory.Create(ints);
    this.PUT_PushContract(stack, 0);
    Assert.IsNotNull((object)stack);
    Assert.AreEqual<int>(105, stack.Count);
}
    }
}
