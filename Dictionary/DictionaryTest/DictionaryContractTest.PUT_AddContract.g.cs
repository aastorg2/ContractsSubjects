// <copyright file="DictionaryContractTest.PUT_AddContract.g.cs">Copyright ©  2019</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Dictionary;
using System.Collections.Generic;
using Dictionary.Test.Factories;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Dictionary.Test
{
    public partial class DictionaryContractTest
    {
[TestMethod]
[PexGeneratedBy(typeof(DictionaryContractTest))]
public void PUT_AddContract213()
{
    Dictionary<int, int> dictionary;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[0];
    dictionary = DictionaryFactory.CreateKeyValPair(keyValuePairs);
    this.PUT_AddContract(dictionary, 0, 0);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(1, dictionary.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(DictionaryContractTest))]
[PexRaisedException(typeof(ArgumentException))]
public void PUT_AddContractThrowsArgumentException83()
{
    Dictionary<int, int> dictionary;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    dictionary = DictionaryFactory.CreateKeyValPair(keyValuePairs);
    this.PUT_AddContract(dictionary, 0, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(DictionaryContractTest))]
[PexRaisedException(typeof(ArgumentException))]
public void PUT_AddContractThrowsArgumentException268()
{
    Dictionary<int, int> dictionary;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    dictionary = DictionaryFactory.CreateKeyValPair(keyValuePairs);
    this.PUT_AddContract(dictionary, 0, 1);
}
[TestMethod]
[PexGeneratedBy(typeof(DictionaryContractTest))]
public void PUT_AddContract937()
{
    Dictionary<int, int> dictionary;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    dictionary = DictionaryFactory.CreateKeyValPair(keyValuePairs);
    this.PUT_AddContract(dictionary, 49161, 0);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(2, dictionary.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(DictionaryContractTest))]
public void PUT_AddContract298()
{
    Dictionary<int, int> dictionary;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    dictionary = DictionaryFactory.CreateKeyValPair(keyValuePairs);
    this.PUT_AddContract(dictionary, int.MinValue, 0);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(2, dictionary.Count);
}
[TestMethod]
[PexGeneratedBy(typeof(DictionaryContractTest))]
public void PUT_AddContract260()
{
    Dictionary<int, int> dictionary;
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    dictionary = DictionaryFactory.CreateKeyValPair(keyValuePairs);
    this.PUT_AddContract(dictionary, 19815165, 1);
    Assert.IsNotNull((object)dictionary);
    Assert.IsNotNull(dictionary.Comparer);
    Assert.AreEqual<int>(2, dictionary.Count);
}
    }
}
